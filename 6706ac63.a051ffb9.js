(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{198:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return l}));var r=a(2),n=a(9),b=(a(0),a(260)),o={title:"Operator"},i={id:"programming/Java/6Operator",isDocsHomePage:!1,title:"Operator",description:"Assignment Operator",source:"@site/docs/programming/Java/6Operator.mdx",permalink:"/docs/programming/Java/6Operator",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Java/6Operator.mdx",lastUpdatedAt:1598198409,sidebar:"java",previous:{title:"Variable",permalink:"/docs/programming/Java/5Variable"},next:{title:"Control Flow",permalink:"/docs/programming/Java/7ControlFlow"}},c=[{value:"Assignment Operator",id:"assignment-operator",children:[]},{value:"Arithmetic Operators",id:"arithmetic-operators",children:[]},{value:"Unary Operators",id:"unary-operators",children:[]},{value:"Relational Operators",id:"relational-operators",children:[]},{value:"Conditional Operators",id:"conditional-operators",children:[{value:"Ternary operator",id:"ternary-operator",children:[]}]},{value:"Type Comparison Operator",id:"type-comparison-operator",children:[]},{value:"Operation on bits",id:"operation-on-bits",children:[]}],p={rightToc:c};function l(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(b.b)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"assignment-operator"},"Assignment Operator"),Object(b.b)("p",null,'The assignment operator "',Object(b.b)("inlineCode",{parentName:"p"},"="),'" assigns the value on its right to the operand on its left:'),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"int cadence = 0;\nint speed = 0;\nint gear = 1;\n")),Object(b.b)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Operator"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"+")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Additive operator ","(","also used for String concatenation",")")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"-")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Subtraction operator")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"*")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Multiplication operator")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"/")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Division operator")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"%")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Remainder operator")))),Object(b.b)("h2",{id:"unary-operators"},"Unary Operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Operator"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"+")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Unary plus operator; indicates positive value ","(","numbers are positive without this, however",")")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"-")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Unary minus operator; negates an expression")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"++")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Increment operator; increments a value by 1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"--")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Decrement operator; decrements a value by 1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"!")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Logical complement operator; inverts the value of a boolean")))),Object(b.b)("h2",{id:"relational-operators"},"Relational Operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Operator"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"==")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"equal to")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"!=")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"not equal to")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},">")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"greater than")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},">=")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"greater than or equal to")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"<")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"less than")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"<=")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"less than or equal to")))),Object(b.b)("h2",{id:"conditional-operators"},"Conditional Operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Operator"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"&&")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"and")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"`"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}))))),Object(b.b)("p",null,'These operators exhibit "short-circuiting" behavior, which means that the second operand is evaluated only if needed.'),Object(b.b)("h3",{id:"ternary-operator"},"Ternary operator"),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"?:"),"is known as the ternary operator because it uses three operands."),Object(b.b)("p",null,"If ",Object(b.b)("inlineCode",{parentName:"p"},"someCondition")," is ",Object(b.b)("inlineCode",{parentName:"p"},"true"),", assign the value of ",Object(b.b)("inlineCode",{parentName:"p"},"value1")," to ",Object(b.b)("inlineCode",{parentName:"p"},"result"),". Otherwise, assign the value of ",Object(b.b)("inlineCode",{parentName:"p"},"value2")," to ",Object(b.b)("inlineCode",{parentName:"p"},"result"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"result = someCondition ? value1 : value2;\n")),Object(b.b)("h2",{id:"type-comparison-operator"},"Type Comparison Operator"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"instanceof")," operator compares an object to a specified type."),Object(b.b)("p",null,Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html"}),"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html")),Object(b.b)("h2",{id:"operation-on-bits"},"Operation on bits"),Object(b.b)("h4",{id:""},Object(b.b)("inlineCode",{parentName:"h4"},"~")),Object(b.b)("p",null,'The unary bitwise complement operator "',Object(b.b)("inlineCode",{parentName:"p"},"~"),'" inverts a bit pattern.'),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},'it can be applied to any of the integral types, making every "0" a "1" and every "1" a "0". '),Object(b.b)("li",{parentName:"ol"},"For example, a ",Object(b.b)("inlineCode",{parentName:"li"},"byte"),' contains 8 bits; applying this operator to a value whose bit pattern is "00000000" would change its pattern to "11111111".')),Object(b.b)("h4",{id:"-1"},Object(b.b)("inlineCode",{parentName:"h4"},"<<")),Object(b.b)("p",null,'The signed left shift operator "',Object(b.b)("inlineCode",{parentName:"p"},"<<"),'" shifts a bit pattern to the left, and the signed right shift operator "',Object(b.b)("inlineCode",{parentName:"p"},">>"),'" shifts a bit pattern to the right. The bit pattern is given by the left-hand operand, and the number of positions to shift by the right-hand operand. The unsigned right shift operator "',Object(b.b)("inlineCode",{parentName:"p"},">>>"),'" shifts a zero into the leftmost position, while the leftmost position after ',Object(b.b)("inlineCode",{parentName:"p"},'">>"')," depends on sign extension."),Object(b.b)("h4",{id:"-2"},Object(b.b)("inlineCode",{parentName:"h4"},"&")),Object(b.b)("p",null,"The bitwise ",Object(b.b)("inlineCode",{parentName:"p"},"&")," operator performs a bitwise AND operation."),Object(b.b)("h4",{id:"-3"},Object(b.b)("inlineCode",{parentName:"h4"},"^")),Object(b.b)("p",null,"The bitwise ",Object(b.b)("inlineCode",{parentName:"p"},"^")," operator performs a bitwise exclusive OR operation."),Object(b.b)("h4",{id:"-4"},Object(b.b)("inlineCode",{parentName:"h4"},"|")),Object(b.b)("p",null,"The bitwise ",Object(b.b)("inlineCode",{parentName:"p"},"|")," operator performs a bitwise inclusive OR operation."))}l.isMDXComponent=!0},260:function(e,t,a){"use strict";a.d(t,"a",(function(){return O})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},b=Object.keys(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),l=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},O=function(e){var t=l(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},j=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,b=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),O=l(a),j=r,m=O["".concat(o,".").concat(j)]||O[j]||d[j]||b;return a?n.a.createElement(m,i(i({ref:t},p),{},{components:a})):n.a.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var b=a.length,o=new Array(b);o[0]=j;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<b;p++)o[p]=a[p];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);
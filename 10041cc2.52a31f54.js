(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{141:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var a=t(2),r=t(9),i=(t(0),t(220)),o={},l={id:"programming/Go/Go",isDocsHomePage:!1,title:"Go",description:"Reference",source:"@site/docs/programming/Go/Go.md",permalink:"/docs/programming/Go/Go",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Go/Go.md",lastUpdatedAt:1596099793,sidebar:"go"},c=[{value:"Reference",id:"reference",children:[]},{value:"Why",id:"why",children:[]},{value:"Hello, \u4e16\u754c",id:"hello-\u4e16\u754c",children:[]},{value:"Packages",id:"packages",children:[{value:"Imports",id:"imports",children:[]},{value:"Exported names",id:"exported-names",children:[]}]},{value:"Basic types",id:"basic-types",children:[{value:"Zero values",id:"zero-values",children:[]},{value:"Type conversions",id:"type-conversions",children:[]},{value:"Type inference",id:"type-inference",children:[]},{value:"Constants",id:"constants",children:[]},{value:"Numeric Constants",id:"numeric-constants",children:[]}]},{value:"Variables",id:"variables",children:[{value:"Variables with initializers",id:"variables-with-initializers",children:[]},{value:"Short variable declarations",id:"short-variable-declarations",children:[]}]},{value:"Functions",id:"functions",children:[]},{value:"Conditions",id:"conditions",children:[]},{value:"Defer",id:"defer",children:[]},{value:"Pointers",id:"pointers",children:[]},{value:"Structs",id:"structs",children:[]},{value:"Arrays",id:"arrays",children:[]}],s={rightToc:c};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"reference"},"Reference"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://tour.golang.org/list"}),"Go tour")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65"}),"Why should you learn go"))),Object(i.b)("h2",{id:"why"},"Why"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Go has goroutines instead of threads.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Goroutines have growable segmented stacks."),Object(i.b)("li",{parentName:"ul"},"Goroutines have a faster startup time than threads."),Object(i.b)("li",{parentName:"ul"},"Goroutines come with built-in primitives to communicate safely between themselves (channels)."),Object(i.b)("li",{parentName:"ul"},"Goroutines allow you to avoid having to resort to mutex locking when sharing data structures."),Object(i.b)("li",{parentName:"ul"},"A single goroutine can run on multiple threads. Goroutines are multiplexed into small number of OS threads."))),Object(i.b)("li",{parentName:"ol"},"Compiled language.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Performance is almost nearer to lower level languages."))),Object(i.b)("li",{parentName:"ol"},"Neat and clean syntax",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"No classes. Every thing is divided into packages only. Go has only structs instead of classes."),Object(i.b)("li",{parentName:"ul"},"Does not support inheritance."),Object(i.b)("li",{parentName:"ul"},"No constructors."),Object(i.b)("li",{parentName:"ul"},"No annotations."),Object(i.b)("li",{parentName:"ul"},"No generics."),Object(i.b)("li",{parentName:"ul"},"No exceptions.")))),Object(i.b)("h2",{id:"hello-\u4e16\u754c"},"Hello, \u4e16\u754c"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"go version go1.13.3 linux/amd64\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello, \u4e16\u754c")\n}\n')),Object(i.b)("h2",{id:"packages"},"Packages"),Object(i.b)("p",null,"Every Go program is made up of packages. Programs start running in package main.\nBy convention, the package name is the same as the last element of the import path."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},'\u2139\ufe0f For instance, the "math/rand"package comprises files that begin with the statement package ',Object(i.b)("inlineCode",{parentName:"p"},"rand"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "math/rand"\n)\n\nfunc main() {\n    fmt.Println("My favorite number is", rand.Intn(10))\n}\n')),Object(i.b)("h3",{id:"imports"},"Imports"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "math"\n)\n\nfunc main() {\n    fmt.Printf("Now you have %g problems.\\n", math.Sqrt(7))\n}\n')),Object(i.b)("p",null,'This code groups the imports into a parenthesized, "factored" import statement.\nYou can also write multiple import statements, like:'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'import "fmt"\nimport "math"\n')),Object(i.b)("h3",{id:"exported-names"},"Exported names"),Object(i.b)("p",null,"In Go, a name is exported if it begins with a capital letter. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"Pizza")," is an exported name, as is ",Object(i.b)("inlineCode",{parentName:"p"},"Pi"),", which is exported from the ",Object(i.b)("inlineCode",{parentName:"p"},"math")," package."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"pizza")," and ",Object(i.b)("inlineCode",{parentName:"p"},"pi")," do not start with a capital letter, so they are not exported."),Object(i.b)("p",null,'When importing a package, you can refer only to its exported names. Any "unexported" names are not accessible from outside the package.'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "math"\n)\n\nfunc main() {\n    //fmt.Println(math.pi)\n    fmt.Println(math.Pi)\n}\n')),Object(i.b)("h2",{id:"basic-types"},"Basic types"),Object(i.b)("p",null,"Go's basic types are:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"bool\n\nstring\n\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\n\nbyte // alias for uint8\n\nrune // alias for int32\n     // represents a Unicode code point\n\nfloat32 float64\n\ncomplex64 complex128\n")),Object(i.b)("p",null," The ",Object(i.b)("inlineCode",{parentName:"p"},"int"),", ",Object(i.b)("inlineCode",{parentName:"p"},"uint"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"uintptr")," types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"When you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "math/cmplx"\n)\n\nvar (\n    ToBe   bool       = false\n    MaxInt uint64     = 1<<64 - 1\n    z      complex128 = cmplx.Sqrt(-5 + 12i)\n)\n\nfunc main() {\n    fmt.Printf("Type: %T Value: %v\\n", ToBe, ToBe)\n    fmt.Printf("Type: %T Value: %v\\n", MaxInt, MaxInt)\n    fmt.Printf("Type: %T Value: %v\\n", z, z)\n}\n')),Object(i.b)("h3",{id:"zero-values"},"Zero values"),Object(i.b)("p",null,"Variables declared without an explicit initial value are given their ",Object(i.b)("em",{parentName:"p"},"zero value"),"."),Object(i.b)("p",null,"The zero value is:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"0")," for numeric types,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"false")," for the boolean type, and"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'""')," (the empty string) for strings.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    var i int\n    var f float64\n    var b bool\n    var s string\n    fmt.Printf("%v %v %v %q\\n", i, f, b, s)\n}\n\n// Expected results:\n0 0 false ""\n')),Object(i.b)("h3",{id:"type-conversions"},"Type conversions"),Object(i.b)("p",null,"The expression ",Object(i.b)("inlineCode",{parentName:"p"},"T(v)")," converts the value ",Object(i.b)("inlineCode",{parentName:"p"},"v")," to the type ",Object(i.b)("inlineCode",{parentName:"p"},"T"),"."),Object(i.b)("p",null,"Some numeric conversions:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"var i int = 42\nvar f float64 = float64(i)\nvar u uint = uint(f)\n")),Object(i.b)("p",null,"Or, put more simply:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"i := 42\nf := float64(i)\nu := uint(f)\n")),Object(i.b)("p",null,"Unlike in C, in Go assignment between items of different type requires an ",Object(i.b)("strong",{parentName:"p"},"explicit")," conversion."),Object(i.b)("h3",{id:"type-inference"},"Type inference"),Object(i.b)("h3",{id:"constants"},"Constants"),Object(i.b)("h3",{id:"numeric-constants"},"Numeric Constants"),Object(i.b)("h2",{id:"variables"},"Variables"),Object(i.b)("h3",{id:"variables-with-initializers"},"Variables with initializers"),Object(i.b)("h3",{id:"short-variable-declarations"},"Short variable declarations"),Object(i.b)("h2",{id:"functions"},"Functions"),Object(i.b)("h2",{id:"conditions"},"Conditions"),Object(i.b)("h2",{id:"defer"},"Defer"),Object(i.b)("h2",{id:"pointers"},"Pointers"),Object(i.b)("h2",{id:"structs"},"Structs"),Object(i.b)("h2",{id:"arrays"},"Arrays"))}b.isMDXComponent=!0},220:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(t),m=a,d=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return t?r.a.createElement(d,l(l({ref:n},s),{},{components:t})):r.a.createElement(d,l({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);
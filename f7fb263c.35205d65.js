(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{257:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));var a=t(2),r=t(9),i=(t(0),t(266)),o={title:"New or Make"},c={id:"programming/Go/3_11New_Make",isDocsHomePage:!1,title:"New or Make",description:"Why would I make() or new()?",source:"@site/docs/programming/Go/3_11New_Make.mdx",permalink:"/docs/programming/Go/3_11New_Make",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Go/3_11New_Make.mdx",lastUpdatedAt:1599251997,sidebar:"go",previous:{title:"Map",permalink:"/docs/programming/Go/3_10Map"},next:{title:"Method",permalink:"/docs/programming/Go/4_1Method"}},l=[{value:"<code>new</code>",id:"new",children:[]},{value:"<code>make</code>",id:"make",children:[]},{value:"<code>new</code> V.S. <code>make</code>",id:"new-vs-make",children:[]}],p={rightToc:l};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/9320862/why-would-i-make-or-new/9325620#9325620%22"}),"Why would I make() or new()?")),Object(i.b)("p",null,"Go has multiple ways of memory allocation and value initialization:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"&T{...}"),", ",Object(i.b)("inlineCode",{parentName:"p"},"&someLocalVar"),", ",Object(i.b)("inlineCode",{parentName:"p"},"new"),", ",Object(i.b)("inlineCode",{parentName:"p"},"make")),Object(i.b)("p",null,"Allocation can also happen when creating composite literals."),Object(i.b)("h2",{id:"new"},Object(i.b)("inlineCode",{parentName:"h2"},"new")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"new")," can be used to allocate values such as integers, ",Object(i.b)("inlineCode",{parentName:"p"},"&int")," is illegal:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"new(Point)\n&Point{}      // OK\n&Point{2, 3}  // Combines allocation and initialization\n\nnew(int)\n&int          // Illegal\n\n// Works, but it is less convenient to write than new(int)\nvar i int\n&i\n")),Object(i.b)("h2",{id:"make"},Object(i.b)("inlineCode",{parentName:"h2"},"make")),Object(i.b)("p",null,"It creates slices, maps, and channels only, and it returns an initialized (not zeroed) value of type T (not *T). "),Object(i.b)("p",null,"The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use. A slice, for example, is a three-item descriptor containing a pointer to the data (inside an array), the length, and the capacity, and until those items are initialized, the slice is nil. For slices, maps, and channels, make initializes the internal data structure and prepares the value for use. "),Object(i.b)("p",null,"For instance,"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"make([]int, 10, 100)\n")),Object(i.b)("p",null,"allocates an array of 100 ints and then creates a slice structure with length 10 and a capacity of 100 pointing at the first 10 elements of the array. (When making a slice, the capacity can be omitted; see the section on slices for more information.) In contrast, new([]int) returns a pointer to a newly allocated, zeroed slice structure, that is, a pointer to a nil slice value."),Object(i.b)("h2",{id:"new-vs-make"},Object(i.b)("inlineCode",{parentName:"h2"},"new")," V.S. ",Object(i.b)("inlineCode",{parentName:"h2"},"make")),Object(i.b)("p",null,"The difference between ",Object(i.b)("inlineCode",{parentName:"p"},"new")," and ",Object(i.b)("inlineCode",{parentName:"p"},"make")," can be seen by looking at the following examples:"),Object(i.b)("p",null,"Example 1:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful\nvar v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints\n\n// Unnecessarily complex:\nvar p *[]int = new([]int)\n*p = make([]int, 100, 100)\n\n// Idiomatic:\nv := make([]int, 100)\n")),Object(i.b)("p",null,"Example 2:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"p := new(chan int)   // p has type: *chan int\nc := make(chan int)  // c has type: chan int\n")),Object(i.b)("p",null,"Suppose Go does not have ",Object(i.b)("inlineCode",{parentName:"p"},"new")," and ",Object(i.b)("inlineCode",{parentName:"p"},"make"),", but it has the built-in function ",Object(i.b)("inlineCode",{parentName:"p"},"NEW"),". Then the example code would look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"p := NEW(*chan int)  // * is mandatory\nc := NEW(chan int)\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"*")," ",Object(i.b)("em",{parentName:"p"},"would be mandatory"),", so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"new(int)        --\x3e  NEW(*int)\nnew(Point)      --\x3e  NEW(*Point)\nnew(chan int)   --\x3e  NEW(*chan int)\nmake([]int, 10) --\x3e  NEW([]int, 10)\n\nnew(Point)  // Illegal\nnew(int)    // Illegal\n")),Object(i.b)("p",null,"Yes, merging ",Object(i.b)("inlineCode",{parentName:"p"},"new")," and ",Object(i.b)("inlineCode",{parentName:"p"},"make")," into a single built-in function is possible. However, it is probable that a single built-in function would lead to more confusion among new Go programmers than having two built-in functions."),Object(i.b)("p",null,"Considering all of the above points, it appears more appropriate for ",Object(i.b)("inlineCode",{parentName:"p"},"new")," and ",Object(i.b)("inlineCode",{parentName:"p"},"make")," to remain separate."))}s.isMDXComponent=!0},266:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),s=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=s(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(t),u=a,d=b["".concat(o,".").concat(u)]||b[u]||m[u]||i;return t?r.a.createElement(d,c(c({ref:n},p),{},{components:t})):r.a.createElement(d,c({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{169:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return l})),a.d(n,"metadata",(function(){return c})),a.d(n,"rightToc",(function(){return s})),a.d(n,"default",(function(){return p}));var t=a(2),i=a(9),r=(a(0),a(260)),l={title:"Array"},c={id:"programming/Go/3_9Array",isDocsHomePage:!1,title:"Array",description:"Arrays are value types.",source:"@site/docs/programming/Go/3_9Array.mdx",permalink:"/docs/programming/Go/3_9Array",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Go/3_9Array.mdx",lastUpdatedAt:1598157283,sidebar:"go",previous:{title:"Structs",permalink:"/docs/programming/Go/3_8Struct"},next:{title:"Map",permalink:"/docs/programming/Go/3_10Map"}},s=[{value:"Slices",id:"slices",children:[]},{value:"Slice literals",id:"slice-literals",children:[]},{value:"Slice defaults",id:"slice-defaults",children:[]},{value:"Slice length and capacity",id:"slice-length-and-capacity",children:[]},{value:"Nil slices",id:"nil-slices",children:[]},{value:"Creating a slice with make",id:"creating-a-slice-with-make",children:[]},{value:"Slices of slices",id:"slices-of-slices",children:[]},{value:"Appending to a slice",id:"appending-to-a-slice",children:[]},{value:"Range",id:"range",children:[]},{value:"Playground",id:"playground",children:[{value:"Initialization",id:"initialization",children:[]},{value:"Copy",id:"copy",children:[]},{value:"Append",id:"append",children:[]},{value:"Caution",id:"caution",children:[]}]}],o={rightToc:s};function p(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},o,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Arrays are value types."),Object(r.b)("p",{parentName:"div"},"Slices are reference types. "))),Object(r.b)("p",null,"The type ",Object(r.b)("inlineCode",{parentName:"p"},"[n]T")," is an array of ",Object(r.b)("inlineCode",{parentName:"p"},"n")," values of type ",Object(r.b)("inlineCode",{parentName:"p"},"T"),"."),Object(r.b)("p",null,"The expression"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"var a [10]int\n")),Object(r.b)("p",null,"declares a variable ",Object(r.b)("inlineCode",{parentName:"p"},"a")," as an array of ten integers."),Object(r.b)("p",null,"An array's length is part of its type, so arrays cannot be resized. This seems limiting, but don't worry; Go provides a convenient way of working with arrays."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    var a [2]string\n    a[0] = "Hello"\n    a[1] = "World"\n    fmt.Println(a[0], a[1])\n    fmt.Println(a)\n\n    primes := [6]int{2, 3, 5, 7, 11, 13}\n    fmt.Println(primes)\n}\n')),Object(r.b)("h2",{id:"slices"},"Slices"),Object(r.b)("p",null,"An array has a fixed size. A slice, on the other hand, is a dynamically-sized, flexible view into the elements of an array. In practice, slices are much more common than arrays."),Object(r.b)("p",null,"The type ",Object(r.b)("inlineCode",{parentName:"p"},"[]T")," is a slice with elements of type ",Object(r.b)("inlineCode",{parentName:"p"},"T"),"."),Object(r.b)("p",null,"A slice is formed by specifying two indices, a low and high bound, separated by a colon:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"a[low : high]\n")),Object(r.b)("p",null,"This selects a half-open range which includes the first element, but excludes the last one."),Object(r.b)("p",null,"The following expression creates a slice which includes elements 1 through 3 of ",Object(r.b)("inlineCode",{parentName:"p"},"a"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"a[1:4]\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    primes := [6]int{2, 3, 5, 7, 11, 13}\n\n    var s []int = primes[1:4]\n    fmt.Println(s)\n}\n\n\n// [3 5 7]\n')),Object(r.b)("p",null,'{% hint style="info" %}\nSlices are like references to arrays\n{% endhint %}'),Object(r.b)("p",null,"A slice ",Object(r.b)("strong",{parentName:"p"},"does not store")," any data, it just describes a section of an underlying array."),Object(r.b)("p",null,"Changing the elements of a slice modifies the corresponding elements of its underlying array."),Object(r.b)("p",null,"Other slices that share the same underlying array will see those changes."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    names := [4]string{\n        "John",\n        "Paul",\n        "George",\n        "Ringo",\n    }\n    fmt.Println(names)\n\n    a := names[0:2]\n    b := names[1:3]\n    fmt.Println(a, b)\n\n    b[0] = "XXX"\n    fmt.Println(a, b)\n    fmt.Println(names)\n}\n\n\n/*\n[John Paul George Ringo]\n[John Paul] [Paul George]\n[John XXX] [XXX George]\n[John XXX George Ringo]\n*/\n')),Object(r.b)("h2",{id:"slice-literals"},"Slice literals"),Object(r.b)("p",null,"A slice literal is like an array literal without the length."),Object(r.b)("p",null,"This is an array literal:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"[3]bool{true, true, false}\n")),Object(r.b)("p",null,"And this creates the same array as above, then builds a slice that references it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"[]bool{true, true, false}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    q := []int{2, 3, 5, 7, 11, 13}\n    fmt.Println(q)\n\n    r := []bool{true, false, true, true, false, true}\n    fmt.Println(r)\n\n    s := []struct {\n        i int\n        b bool\n    }{\n        {2, true},\n        {3, false},\n        {5, true},\n        {7, true},\n        {11, false},\n        {13, true},\n    }\n    fmt.Println(s)\n}\n\n\n/*\n[2 3 5 7 11 13]\n[true false true true false true]\n[{2 true} {3 false} {5 true} {7 true} {11 false} {13 true}]\n*/\n')),Object(r.b)("h2",{id:"slice-defaults"},"Slice defaults"),Object(r.b)("p",null,"When slicing, you may omit the high or low bounds to use their defaults instead."),Object(r.b)("p",null,"The default is zero for the low bound and the length of the slice for the high bound."),Object(r.b)("p",null,"For the array"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"var a [10]int\n")),Object(r.b)("p",null,"these slice expressions are equivalent:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"a[0:10]\na[:10]\na[0:]\na[:]\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    s := []int{2, 3, 5, 7, 11, 13}\n\n    s = s[1:4]\n    fmt.Println(s)\n\n    s = s[:2]\n    fmt.Println(s)\n\n    s = s[1:]\n    fmt.Println(s)\n}\n\n//\n[3 5 7]\n[3 5]\n[5]\n')),Object(r.b)("h2",{id:"slice-length-and-capacity"},"Slice length and capacity"),Object(r.b)("p",null,"A slice has both a length and a capacity."),Object(r.b)("p",null,"The length of a slice is the number of elements it contains."),Object(r.b)("p",null,'{% hint style="warning" %}\nThe capacity of a slice is the number of elements in the underlying array, counting from the ',Object(r.b)("strong",{parentName:"p"},"first element in the slice"),".\n{% endhint %}"),Object(r.b)("p",null,"The length and capacity of a slice ",Object(r.b)("inlineCode",{parentName:"p"},"s")," can be obtained using the expressions ",Object(r.b)("inlineCode",{parentName:"p"},"len(s)")," and ",Object(r.b)("inlineCode",{parentName:"p"},"cap(s)"),"."),Object(r.b)("p",null,"You can extend a slice's length by re-slicing it, provided it has sufficient capacity. "),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    s := []int{2, 3, 5, 7, 11, 13}\n    printSlice(s)\n\n    // Slice the slice to give it zero length.\n    s = s[:0]\n    printSlice(s)\n\n    // Extend its length.\n    s = s[:4]\n    printSlice(s)\n\n    // Drop its first two values.\n    s = s[2:]\n    printSlice(s)\n}\n\nfunc printSlice(s []int) {\n    fmt.Printf("len=%d cap=%d %v\\n", len(s), cap(s), s)\n}\n\n/*\nlen=6 cap=6 [2 3 5 7 11 13]\nlen=0 cap=6 []\nlen=4 cap=6 [2 3 5 7]\nlen=2 cap=4 [5 7]\n*/\n')),Object(r.b)("h2",{id:"nil-slices"},"Nil slices"),Object(r.b)("p",null,"The zero value of a slice is ",Object(r.b)("inlineCode",{parentName:"p"},"nil"),"."),Object(r.b)("p",null,"A nil slice has a length and capacity of 0 and has no underlying array."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    var s []int\n    fmt.Println(s, len(s), cap(s))\n    if s == nil {\n        fmt.Println("nil!")\n    }\n}\n\n// Excepted results:\n[] 0 0\nnil!\n')),Object(r.b)("h2",{id:"creating-a-slice-with-make"},"Creating a slice with make"),Object(r.b)("p",null,"Slices can be created with the built-in ",Object(r.b)("inlineCode",{parentName:"p"},"make")," function; this is how you create dynamically-sized arrays."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"make")," function allocates a zeroed array and returns a slice that refers to that array:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"a := make([]int, 5)  // len(a)=5\n")),Object(r.b)("p",null,"To specify a capacity, pass a third argument to ",Object(r.b)("inlineCode",{parentName:"p"},"make"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),"b := make([]int, 0, 5) // len(b)=0, cap(b)=5\n\nb = b[:cap(b)] // len(b)=5, cap(b)=5\nb = b[1:]      // len(b)=4, cap(b)=4\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    a := make([]int, 5)\n    printSlice("a", a)\n\n    b := make([]int, 0, 5)\n    printSlice("b", b)\n\n    c := b[:2]\n    printSlice("c", c)\n\n    d := c[2:5]\n    printSlice("d", d)\n}\n\nfunc printSlice(s string, x []int) {\n    fmt.Printf("%s len=%d cap=%d %v\\n",\n        s, len(x), cap(x), x)\n}\n\n/*\na len=5 cap=5 [0 0 0 0 0]\nb len=0 cap=5 []\nc len=2 cap=5 [0 0]\nd len=3 cap=3 [0 0 0]\n*/\n')),Object(r.b)("h2",{id:"slices-of-slices"},"Slices of slices"),Object(r.b)("p",null,"Slices can contain any type, including other slices."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "strings"\n)\n\nfunc main() {\n    // Create a tic-tac-toe board.\n    board := [][]string{\n        []string{"_", "_", "_"},\n        []string{"_", "_", "_"},\n        []string{"_", "_", "_"},\n    }\n\n    // The players take turns.\n    board[0][0] = "X"\n    board[2][2] = "O"\n    board[1][2] = "X"\n    board[1][0] = "O"\n    board[0][2] = "X"\n\n    for i := 0; i < len(board); i++ {\n        fmt.Printf("%s\\n", strings.Join(board[i], " "))\n    }\n}\n\n/*\nX _ X\nO _ X\n_ _ O\n*/\n')),Object(r.b)("h2",{id:"appending-to-a-slice"},"Appending to a slice"),Object(r.b)("p",null,"Go provides a built-in ",Object(r.b)("inlineCode",{parentName:"p"},"append")," function. The ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://golang.org/pkg/builtin/#append"}),"documentation")," of the built-in package describes ",Object(r.b)("inlineCode",{parentName:"p"},"append"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"func append(s []T, vs ...T) []T\n")),Object(r.b)("p",null,"The first parameter ",Object(r.b)("inlineCode",{parentName:"p"},"s")," of ",Object(r.b)("inlineCode",{parentName:"p"},"append")," is a slice of type ",Object(r.b)("inlineCode",{parentName:"p"},"T"),", and the rest are ",Object(r.b)("inlineCode",{parentName:"p"},"T")," values to append to the slice."),Object(r.b)("p",null,"The resulting value of ",Object(r.b)("inlineCode",{parentName:"p"},"append")," is a slice containing all the elements of the original slice plus the provided values."),Object(r.b)("p",null,'{% hint style="warning" %}\nIf the backing array of ',Object(r.b)("inlineCode",{parentName:"p"},"s")," is too small to fit all the given values a bigger array will be allocated. The returned slice will point to the newly allocated array.\n{% endhint %}"),Object(r.b)("p",null,"(","To learn more about slices, read the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://blog.golang.org/go-slices-usage-and-internals"}),"Slices: usage and internals")," article.",")"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    var s []int\n    printSlice(s)\n\n    // append works on nil slices.\n    s = append(s, 0)    // \n    // the capacity now is 2 instead of 1 \n    // because a new array has been created and the size is doubled\n    printSlice(s)\n\n    // The slice grows as needed.\n    s = append(s, 1)\n    printSlice(s)\n\n    // We can add more than one element at a time.\n    s = append(s, 2, 3, 4)\n    printSlice(s)\n}\n\nfunc printSlice(s []int) {\n    fmt.Printf("len=%d cap=%d %v\\n", len(s), cap(s), s)\n}\n\n/*\nlen=0 cap=0 []\nlen=1 cap=2 [0]\nlen=2 cap=2 [0 1]\nlen=5 cap=8 [0 1 2 3 4]\n*/\n')),Object(r.b)("h2",{id:"range"},"Range"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"range")," form of the ",Object(r.b)("inlineCode",{parentName:"p"},"for")," loop iterates over a slice or map."),Object(r.b)("p",null,"When ranging over a slice, two values are returned for each iteration. The first is the index, and the second is a ",Object(r.b)("strong",{parentName:"p"},"copy of the element")," at that index."),Object(r.b)("p",null,'{% hint style="danger" %}\nThe second is a ',Object(r.b)("strong",{parentName:"p"},"copy of the element")," at that index, so"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Use ",Object(r.b)("inlineCode",{parentName:"li"},"index")," to update the element."),Object(r.b)("li",{parentName:"ol"},"Or use pointers to update the element\n{% endhint %}")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nvar pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n\nfunc main() {\n    for i, v := range pow {\n        fmt.Printf("2**%d = %d\\n", i, v)\n    }\n}\n\n/*\n2**0 = 1\n2**1 = 2\n2**2 = 4\n2**3 = 8\n2**4 = 16\n2**5 = 32\n2**6 = 64\n2**7 = 128\n*/\n')),Object(r.b)("p",null,"You can skip the index or value by assigning to ",Object(r.b)("inlineCode",{parentName:"p"},"_"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"for i, _ := range pow\nfor _, value := range pow\n")),Object(r.b)("p",null,"If you only want the index, you can omit the second variable."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"for i := range pow\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    pow := make([]int, 10)\n    for i := range pow {\n        pow[i] = 1 << uint(i) // == 2**i\n    }\n    for _, value := range pow {\n        fmt.Printf("%d\\n", value)\n    }\n}\n\n/*\n1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n*/\n')),Object(r.b)("h2",{id:"playground"},"Playground"),Object(r.b)("h3",{id:"initialization"},"Initialization"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n)\n\n\nfunc main() {\n    ints1 := [3]int{1,2,3} // this is an array\n    fmt.Printf("%v\\n", ints1)\n    \n    ints2 := [...]int{1,2,3} // this is an array\n    fmt.Printf("%v\\n", ints2)\n    \n    ints3 := []int{1,2,3} // this is a slice\n    fmt.Printf("%v\\n", ints3)\n    \n    var ints4 [3]int\n    fmt.Printf("%v\\n", ints4)\n}\n\n// Expected results:\n[1 2 3]\n[1 2 3]\n[1 2 3]\n[0 0 0]\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n)\n\n\nfunc main() {\n    var matrix [2][2]int = [2][2]int{[2]int{1,0}, [2]int{0,1}}\n    fmt.Println(matrix)\n}\n\n// [[1 0] [0 1]]\n')),Object(r.b)("h3",{id:"copy"},"Copy"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n)\n\n\nfunc main() {\n    a := [3]int{1,2,3}\n    fmt.Printf("%v\\n", a)\n    \n    b := a\n    b[0] = 0\n    fmt.Printf("%v\\n", a)\n    fmt.Printf("%v\\n", b)\n    \n    c := &a\n    c[0] = 0\n    fmt.Printf("%v\\n", a)\n    fmt.Printf("%v\\n", c)\n}\n\n//\n[1 2 3]\n[1 2 3]\n[0 2 3]\n[0 2 3]\n&[0 2 3]\n')),Object(r.b)("h3",{id:"append"},"Append"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n)\n\n\nfunc main() {\n    a := []int{1,2,3}\n    fmt.Printf("%v\\n", a)\n    \n    a = append(a, 4)\n    fmt.Printf("%v\\n", a)\n    \n    a = append(a, 5, 6)\n    fmt.Printf("%v\\n", a)\n    \n    a = append(a, []int{7, 9}...) // ... is spread out operator\n    fmt.Printf("%v\\n", a)\n}\n\n//\n[1 2 3]\n[1 2 3 4]\n[1 2 3 4 5 6]\n[1 2 3 4 5 6 7 9]\n')),Object(r.b)("h3",{id:"caution"},"Caution"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n)\n\n\nfunc main() {\n    a := []int{1, 2, 3333, 4, 5}\n    fmt.Printf("%v\\n", a)\n    \n    b := append(a[:2], a[3:]...)\n    fmt.Printf("%v\\n", b)\n    fmt.Printf("%v\\n", a)\n}\n\n//\n[1 2 3333 4 5]\n[1 2 4 5]\n[1 2 4 5 5]\n')))}p.isMDXComponent=!0},260:function(e,n,a){"use strict";a.d(n,"a",(function(){return b})),a.d(n,"b",(function(){return d}));var t=a(0),i=a.n(t);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=i.a.createContext({}),p=function(e){var n=i.a.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},b=function(e){var n=p(e.components);return i.a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),b=p(a),u=t,d=b["".concat(l,".").concat(u)]||b[u]||m[u]||r;return a?i.a.createElement(d,c(c({ref:n},o),{},{components:a})):i.a.createElement(d,c({ref:n},o))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,l=new Array(r);l[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,l[1]=c;for(var o=2;o<r;o++)l[o]=a[o];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);
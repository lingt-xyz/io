(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{223:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return j}));var n=a(2),r=a(9),b=(a(0),a(277)),l={title:"Operator"},c={id:"programming/Go/3_3_1Operator",isDocsHomePage:!1,title:"Operator",description:"Arithmetic",source:"@site/docs/programming/Go/3_3_1Operator.mdx",permalink:"/docs/programming/Go/3_3_1Operator",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Go/3_3_1Operator.mdx",lastUpdatedAt:1598229687,sidebar:"go",previous:{title:"Variable",permalink:"/docs/programming/Go/3_3Variable"},next:{title:"Function",permalink:"/docs/programming/Go/3_4Function"}},i=[{value:"Arithmetic",id:"arithmetic",children:[]},{value:"Bitwise operators",id:"bitwise-operators",children:[]},{value:"Comparison",id:"comparison",children:[]},{value:"Logical",id:"logical",children:[{value:"Pointers and channels",id:"pointers-and-channels",children:[]}]},{value:"Ref",id:"ref",children:[]}],O={rightToc:i};function j(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},O,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"arithmetic"},"Arithmetic"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Types"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"+"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, complex values, strings")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"difference"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, complex values")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"product"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, complex values")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"/"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"quotient"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, complex values")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"%"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"remainder"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"&"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bitwise AND"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"|"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bitwise OR"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"^"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bitwise XOR"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"&^"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bit clear (AND NOT)"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"<<"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"left shift"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integer << unsigned integer")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),">>"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"right shift"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integer >> unsigned integer")))),Object(b.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"GO does provide implicit numberic conversions. (",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://golang.org/doc/faq#conversions"}),"why"),")\nSo the following code would not work:"),Object(b.b)("pre",{parentName:"div"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),"x := 1\ny := 1.0\nc := x/y\n")))),Object(b.b)("h2",{id:"bitwise-operators"},"Bitwise operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operation"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Result"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0011 & 0101"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0001"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Bitwise AND")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0011 ","|"," 0101"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0111"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Bitwise OR")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0011 ^ 0101"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0110"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Bitwise XOR")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"^0101"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1010"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Bitwise NOT (same as 1111 ^ 0101)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0011 &^ 0101"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0010"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Bitclear (AND NOT)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"00110101<<2"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"11010100"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Left shift")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"00110101<<100"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"00000000"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"No upper limit on shift count")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"00110101>>2"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"00001101"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Right shift")))),Object(b.b)("h2",{id:"comparison"},"Comparison"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Types"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"=="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"equal"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"comparable")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"!="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"not equal"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"comparable")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"<"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"less"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, strings")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"<="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"less or equal"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, strings")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),">"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"greater"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, strings")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),">="),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"greater or equal"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integers, floats, strings")))),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Boolean, integer, floats, complex values and strings are comparable."),Object(b.b)("li",{parentName:"ul"},"Strings are ordered lexically byte-wise."),Object(b.b)("li",{parentName:"ul"},"Two pointers are equal if they point to the same variable or if both are nil."),Object(b.b)("li",{parentName:"ul"},"Two channel values are equal if they were created by the same call to make or if both are nil."),Object(b.b)("li",{parentName:"ul"},"Two interface values are equal if they have identical dynamic types and equal concrete values or if both are nil."),Object(b.b)("li",{parentName:"ul"},"A value x of non-interface type X and a value t of interface type T are equal if t\u2019s dynamic type is identical to X and t\u2019s concrete value is equal to x."),Object(b.b)("li",{parentName:"ul"},"Two struct values are equal if their corresponding non-blank fields are equal."),Object(b.b)("li",{parentName:"ul"},"Two array values are equal if their corresponding elements are equal.")),Object(b.b)("h2",{id:"logical"},"Logical"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Types"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"&&"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"conditional AND"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'p && q   means "if p then q else false"')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"|","|"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"conditional OR"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"p ","|","|",' q   means "if p then true else q"')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"!"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"NOT"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'!p   means "not p"')))),Object(b.b)("h3",{id:"pointers-and-channels"},"Pointers and channels"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"&"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address of"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"&x   generates a pointer to x")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pointer indirection"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*x   denotes the variable pointed to by x")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"<-"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"receive"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"<-ch   is the value received from channel ch")))),Object(b.b)("h2",{id:"ref"},"Ref"),Object(b.b)("p",null,Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://yourbasic.org/golang/operators/"}),"Operators: complete list")))}j.isMDXComponent=!0},277:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var O=r.a.createContext({}),j=function(e){var t=r.a.useContext(O),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=j(e.components);return r.a.createElement(O.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,l=e.parentName,O=i(e,["components","mdxType","originalType","parentName"]),p=j(a),m=n,d=p["".concat(l,".").concat(m)]||p[m]||o[m]||b;return a?r.a.createElement(d,c(c({ref:t},O),{},{components:a})):r.a.createElement(d,c({ref:t},O))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var O=2;O<b;O++)l[O]=a[O];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
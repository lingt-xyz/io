(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{246:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(9),i=(n(0),n(261)),o={title:"Control Flow"},c={id:"programming/Java/7ControlFlow",isDocsHomePage:!1,title:"Control Flow",description:"if-then",source:"@site/docs/programming/Java/7ControlFlow.mdx",permalink:"/docs/programming/Java/7ControlFlow",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Java/7ControlFlow.mdx",lastUpdatedAt:1598198409,sidebar:"java",previous:{title:"Operator",permalink:"/docs/programming/Java/6Operator"},next:{title:"Class",permalink:"/docs/programming/Java/8Class"}},l=[{value:"if-then",id:"if-then",children:[]},{value:"while",id:"while",children:[]},{value:"for",id:"for",children:[]},{value:"Branching",id:"branching",children:[{value:"break",id:"break",children:[]},{value:"continue",id:"continue",children:[]},{value:"return",id:"return",children:[]}]},{value:"switch",id:"switch",children:[]}],b={rightToc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"if-then"},"if-then"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"if (condition1) {\n    statement1;\n} else if (statement2) {\n    statement2;\n} else {\n    statement3;\n}\n")),Object(i.b)("h2",{id:"while"},"while"),Object(i.b)("p",null,"You can implement an infinite loop using the ",Object(i.b)("inlineCode",{parentName:"p"},"while")," statement as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"while (true){\n    // your code goes here\n}\n")),Object(i.b)("p",null,"The Java programming language also provides a ",Object(i.b)("inlineCode",{parentName:"p"},"do-while")," statement, which can be expressed as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"do {\n     statement(s)\n} while (expression);\n")),Object(i.b)("h2",{id:"for"},"for"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"for (initialization; termination; increment) {\n    statement(s)\n}\n")),Object(i.b)("p",null,"When using this version of the ",Object(i.b)("inlineCode",{parentName:"p"},"for")," statement, keep in mind that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("em",{parentName:"li"},"initialization")," expression initializes the loop; it's executed ",Object(i.b)("em",{parentName:"li"},Object(i.b)("strong",{parentName:"em"},"once")),", as the loop begins."),Object(i.b)("li",{parentName:"ul"},"When the ",Object(i.b)("em",{parentName:"li"},"termination")," expression evaluates to ",Object(i.b)("inlineCode",{parentName:"li"},"false"),", the loop terminates."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("em",{parentName:"li"},"increment")," expression is invoked ",Object(i.b)("em",{parentName:"li"},Object(i.b)("strong",{parentName:"em"},"after"))," each iteration through the loop; it is perfectly acceptable for this expression to increment or decrement a value.")),Object(i.b)("h2",{id:"branching"},"Branching"),Object(i.b)("h3",{id:"break"},"break"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"break")," statement has two forms: labeled and unlabeled. "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"An unlabeled ",Object(i.b)("inlineCode",{parentName:"li"},"break")," statement terminates the ",Object(i.b)("em",{parentName:"li"},Object(i.b)("strong",{parentName:"em"},"innermost"))," ",Object(i.b)("inlineCode",{parentName:"li"},"switch"),", ",Object(i.b)("inlineCode",{parentName:"li"},"for"),", ",Object(i.b)("inlineCode",{parentName:"li"},"while"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"do-while")," statement,"),Object(i.b)("li",{parentName:"ul"},"but a labeled ",Object(i.b)("inlineCode",{parentName:"li"},"break")," terminates an outer statement.  ")),Object(i.b)("h3",{id:"continue"},"continue"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"continue")," statement skips the current iteration of a ",Object(i.b)("inlineCode",{parentName:"p"},"for"),", ",Object(i.b)("inlineCode",{parentName:"p"},"while")," , or ",Object(i.b)("inlineCode",{parentName:"p"},"do-while")," loop. "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The unlabeled form skips to the end of the ",Object(i.b)("em",{parentName:"li"},Object(i.b)("strong",{parentName:"em"},"innermost"))," loop's body and evaluates the ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")," expression that controls the loop."),Object(i.b)("li",{parentName:"ul"},"A labeled ",Object(i.b)("inlineCode",{parentName:"li"},"continue")," statement skips the current iteration of an outer loop marked with the given label.")),Object(i.b)("h3",{id:"return"},"return"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"return")," statement exits from the current method, and control flow returns to where the method was invoked."),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html"}),"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html")),Object(i.b)("h2",{id:"switch"},"switch"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," works with the ",Object(i.b)("inlineCode",{parentName:"p"},"byte"),", ",Object(i.b)("inlineCode",{parentName:"p"},"short"),", ",Object(i.b)("inlineCode",{parentName:"p"},"char"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"int")," primitive data types. It also works with enumerated types, the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"}),Object(i.b)("inlineCode",{parentName:"a"},"String"))," class, and a few special classes that wrap certain primitive types: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html"}),Object(i.b)("inlineCode",{parentName:"a"},"Character")),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html"}),Object(i.b)("inlineCode",{parentName:"a"},"Byte")),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Short.html"}),Object(i.b)("inlineCode",{parentName:"a"},"Short")),", and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html"}),Object(i.b)("inlineCode",{parentName:"a"},"Integer")),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'int month = 8;\nString monthString;\nswitch (month) {\n   case 1:  monthString = "January";\n            break;\n   case 2:  monthString = "February";\n            break;\n   case 3:  monthString = "March";\n            break;\n   case 4:  monthString = "April";\n            break;\n   case 5:  monthString = "May";\n            break;\n   case 6:  monthString = "June";\n            break;\n   case 7:  monthString = "July";\n            break;\n   case 8:  monthString = "August";\n            break;\n   case 9:  monthString = "September";\n            break;\n   case 10: monthString = "October";\n            break;\n   case 11: monthString = "November";\n            break;\n   case 12: monthString = "December";\n            break;\n   default: monthString = "Invalid month";\n            break;\n}\nSystem.out.println(monthString);\n')),Object(i.b)("p",null,"The body of a ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," statement is known as a switch block. A statement in the ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," block can be labeled with one or more ",Object(i.b)("inlineCode",{parentName:"p"},"case")," or ",Object(i.b)("inlineCode",{parentName:"p"},"default")," labels."),Object(i.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"danger")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Each ",Object(i.b)("inlineCode",{parentName:"p"},"break")," statement terminates the enclosing ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," statement. Control flow continues with the first statement following the ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," block. The ",Object(i.b)("inlineCode",{parentName:"p"},"break")," statements are necessary because without them, statements in ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," blocks ",Object(i.b)("em",{parentName:"p"},Object(i.b)("strong",{parentName:"em"},"fall through")),": All statements after the matching ",Object(i.b)("inlineCode",{parentName:"p"},"case")," label are executed in sequence, regardless of the expression of subsequent ",Object(i.b)("inlineCode",{parentName:"p"},"case")," labels, until a ",Object(i.b)("inlineCode",{parentName:"p"},"break")," statement is encountered."))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'java.util.ArrayList<String> futureMonths = new java.util.ArrayList<String>();\n\nint month = 8;\n\nswitch (month) {\n    case 1:  futureMonths.add("January");\n    case 2:  futureMonths.add("February");\n    case 3:  futureMonths.add("March");\n    case 4:  futureMonths.add("April");\n    case 5:  futureMonths.add("May");\n    case 6:  futureMonths.add("June");\n    case 7:  futureMonths.add("July");\n    case 8:  futureMonths.add("August");\n    case 9:  futureMonths.add("September");\n    case 10: futureMonths.add("October");\n    case 11: futureMonths.add("November");\n    case 12: futureMonths.add("December");\n             break;\n    default: break;\n}\n\nif (futureMonths.isEmpty()) {\n    System.out.println("Invalid month number");\n} else {\n    for (String monthName : futureMonths) {\n       System.out.println(monthName);\n    }\n}\n\n// This is the output from the code:\n\nAugust\nSeptember\nOctober\nNovember\nDecember\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'int month = 2;\nint year = 2000;\nint numDays = 0;\n\nswitch (month) {\n    case 1: case 3: case 5:\n    case 7: case 8: case 10:\n    case 12:\n        numDays = 31;\n        break;\n    case 4: case 6:\n    case 9: case 11:\n        numDays = 30;\n        break;\n    case 2:\n        if (((year % 4 == 0) && \n             !(year % 100 == 0))\n             || (year % 400 == 0))\n            numDays = 29;\n        else\n            numDays = 28;\n        break;\n    default:\n        System.out.println("Invalid month.");\n        break;\n}\nSystem.out.println("Number of Days = " + numDays);\n')))}s.isMDXComponent=!0},261:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,d=m["".concat(o,".").concat(u)]||m[u]||p[u]||i;return n?r.a.createElement(d,c(c({ref:t},b),{},{components:n})):r.a.createElement(d,c({ref:t},b))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
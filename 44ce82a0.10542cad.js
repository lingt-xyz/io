(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{186:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return u}));var a=t(2),r=t(9),c=(t(0),t(274)),o={title:"Channel"},l={id:"programming/Go/5_3Channel",isDocsHomePage:!1,title:"Channel",description:"Channels are a typed conduit through which you can send and receive values with the channel operator, <-.",source:"@site/docs/programming/Go/5_3Channel.mdx",permalink:"/docs/programming/Go/5_3Channel",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/programming/Go/5_3Channel.mdx",lastUpdatedAt:1598157283,sidebar:"go",previous:{title:"WaitGroup",permalink:"/docs/programming/Go/5_2WaitGroup"},next:{title:"Select",permalink:"/docs/programming/Go/5_4Select"}},i=[{value:"Buffered Channels",id:"buffered-channels",children:[]},{value:"Range and Close",id:"range-and-close",children:[]}],s={rightToc:i};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Channels are a typed conduit through which you can send and receive values with the channel operator, ",Object(c.b)("inlineCode",{parentName:"p"},"<-"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"ch <- v    // Send v to channel ch.\nv := <-ch  // Receive from ch, and\n           // assign value to v.\n")),Object(c.b)("p",null,"(","The data flows in the direction of the arrow.",")"),Object(c.b)("p",null,"Like maps and slices, channels must be created before use:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"ch := make(chan int)\n")),Object(c.b)("p",null,"By default, sends and receives block until the other side is ready. This allows goroutines to synchronize without explicit locks or condition variables."),Object(c.b)("p",null,"The example code sums the numbers in a slice, distributing the work between two goroutines. Once both goroutines have completed their computation, it calculates the final result."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc sum(s []int, c chan int) {\n    sum := 0\n    for _, v := range s {\n        sum += v\n    }\n    c <- sum // send sum to c\n}\n\nfunc main() {\n    s := []int{7, 2, 8, -9, 4, 0}\n\n    c := make(chan int)\n    go sum(s[:len(s)/2], c)\n    go sum(s[len(s)/2:], c)\n    x, y := <-c, <-c // receive from c\n\n    fmt.Println(x, y, x+y)\n}\n\n\n// -5 17 12\n')),Object(c.b)("h2",{id:"buffered-channels"},"Buffered Channels"),Object(c.b)("p",null,"Channels can be buffered. Provide the buffer length as the second argument to ",Object(c.b)("inlineCode",{parentName:"p"},"make")," to initialize a buffered channel:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"ch := make(chan int, 100)\n")),Object(c.b)("p",null,"Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    ch := make(chan int, 2)\n    ch <- 1\n    ch <- 2\n    fmt.Println(<-ch)\n    fmt.Println(<-ch)\n}\n\n\n/*\n1\n2\n*/\n')),Object(c.b)("p",null,"Modify the example to overfill the buffer and see what happens."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    ch := make(chan int, 2)\n    ch <- 1\n    ch <- 2\n    ch <- 3\n    fmt.Println(<-ch)\n    fmt.Println(<-ch)\n}\n\n\n// fatal error: all goroutines are asleep - deadlock!\n')),Object(c.b)("h2",{id:"range-and-close"},"Range and Close"),Object(c.b)("p",null,"A sender can ",Object(c.b)("inlineCode",{parentName:"p"},"close")," a channel to indicate that no more values will be sent. Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression: after"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"v, ok := <-ch\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"ok")," is ",Object(c.b)("inlineCode",{parentName:"p"},"false")," if there are no more values to receive and the channel is closed."),Object(c.b)("p",null,"The loop ",Object(c.b)("inlineCode",{parentName:"p"},"for i := range c")," receives values from the channel repeatedly until it is closed."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Note:")," Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Another note:")," Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a ",Object(c.b)("inlineCode",{parentName:"p"},"range")," loop."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n)\n\nfunc fibonacci(n int, c chan int) {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n        c <- x\n        x, y = y, x+y\n    }\n    close(c)\n}\n\nfunc main() {\n    c := make(chan int, 10)\n    go fibonacci(cap(c), c)\n    for i := range c {\n        fmt.Println(i)\n    }\n}\n\n\n/*\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n*/\n')))}u.isMDXComponent=!0},274:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return h}));var a=t(0),r=t.n(a);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),u=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,h=p["".concat(o,".").concat(m)]||p[m]||b[m]||c;return t?r.a.createElement(h,l(l({ref:n},s),{},{components:t})):r.a.createElement(h,l({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<c;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);
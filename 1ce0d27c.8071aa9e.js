(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{157:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return u}));var n=a(2),i=a(9),r=(a(0),a(260)),s=a(262),l={title:"COMP 354"},o={id:"course/COMP354",isDocsHomePage:!1,title:"COMP 354",description:"Adapted from Stuart Thiel's lecture, 2018 Summer.",source:"@site/docs/course/COMP354.mdx",permalink:"/docs/course/COMP354",editUrl:"https://github.com/lingt-xyz/io/tree/master/docs/course/COMP354.mdx",lastUpdatedAt:1596005263,sidebar:"course",previous:{title:"COMP 232",permalink:"/docs/course/COMP232"},next:{title:"COMP 361",permalink:"/docs/course/COMP361"}},c=[{value:"Development Phases",id:"development-phases",children:[]},{value:"Testing and TDD",id:"testing-and-tdd",children:[{value:"Who test?",id:"who-test",children:[]},{value:"What is a good test?",id:"what-is-a-good-test",children:[]},{value:"Why types of tests?",id:"why-types-of-tests",children:[]},{value:"What types of tests?",id:"what-types-of-tests",children:[]},{value:"Testing strategy",id:"testing-strategy",children:[]}]},{value:"What are requirements?",id:"what-are-requirements",children:[]},{value:"What are stories?",id:"what-are-stories",children:[]},{value:"What are features?",id:"what-are-features",children:[]},{value:"When we must have requirements?",id:"when-we-must-have-requirements",children:[]},{value:"Definition: What are Actors, Scenarios, and Use Cases?",id:"definition-what-are-actors-scenarios-and-use-cases",children:[]},{value:"Use Case Model",id:"use-case-model",children:[]},{value:"Why Use Cases (P121)",id:"why-use-cases-p121",children:[]},{value:"Definition: Are Use Cases Functional Requirements?",id:"definition-are-use-cases-functional-requirements",children:[]},{value:"Definition: What are Three Kinds of Actors?",id:"definition-what-are-three-kinds-of-actors",children:[]},{value:"Notation: What are Three Common Use Case Formats?",id:"notation-what-are-three-common-use-case-formats",children:[]},{value:"Structural Design",id:"structural-design",children:[]},{value:"Structural Design: Class Deagrams and OOD",id:"structural-design-class-deagrams-and-ood",children:[{value:"Object Oriented Design",id:"object-oriented-design",children:[]}]},{value:"RDD and GRASP Patterns",id:"rdd-and-grasp-patterns",children:[{value:"Responsibility-Driven Design (RDD) 1",id:"responsibility-driven-design-rdd-1",children:[]},{value:"RDD Roles",id:"rdd-roles",children:[]},{value:"GRASP 2, cover, p.277-279",id:"grasp-2-cover-p277-279",children:[]},{value:"The Patterns 2, cover",id:"the-patterns-2-cover",children:[]}]},{value:"Design Patterns",id:"design-patterns-1",children:[{value:"What are patterns?",id:"what-are-patterns",children:[]},{value:"GRASP and GoF",id:"grasp-and-gof",children:[]},{value:"Which Patterns to Consider?",id:"which-patterns-to-consider",children:[]},{value:"General Pattern-Based Design",id:"general-pattern-based-design",children:[]},{value:"A General Approach to General Patterns",id:"a-general-approach-to-general-patterns",children:[]},{value:"Pattern Types and Standard Groups",id:"pattern-types-and-standard-groups",children:[]},{value:"Approaches to Pattern-Based Software Design",id:"approaches-to-pattern-based-software-design",children:[]},{value:"Pattern-based design in context",id:"pattern-based-design-in-context",children:[]},{value:"Thinking in Patterns",id:"thinking-in-patterns",children:[]},{value:"Design Tasks",id:"design-tasks",children:[]},{value:"Common Mistakes",id:"common-mistakes",children:[]},{value:"Architectural Patterns",id:"architectural-patterns",children:[]},{value:"Architectural Pattern Domains",id:"architectural-pattern-domains",children:[]},{value:"Component-Level Patterns",id:"component-level-patterns",children:[]},{value:"UI Design Patterns",id:"ui-design-patterns",children:[]}]},{value:"More GRASP Patterns",id:"more-grasp-patterns",children:[{value:"Polymorphism",id:"polymorphism",children:[]},{value:"Pure Fabrication",id:"pure-fabrication",children:[]},{value:"Indirection",id:"indirection",children:[]},{value:"Protected Variation",id:"protected-variation",children:[]}]},{value:"References",id:"references",children:[]},{value:"Adapter",id:"adapter",children:[]},{value:"Factory",id:"factory",children:[]},{value:"Singleton",id:"singleton",children:[{value:"Why not make it all static?",id:"why-not-make-it-all-static",children:[]}]},{value:"Strategy",id:"strategy",children:[]},{value:"Composite",id:"composite",children:[]},{value:"Facade",id:"facade",children:[]},{value:"Observer/Subscriber",id:"observersubscriber",children:[]},{value:"References",id:"references-1",children:[]},{value:"Architecture",id:"architecture-1",children:[{value:"Architecture as Structure 2, 197-201",id:"architecture-as-structure-2-197-201",children:[]},{value:"Architecture as Risk",id:"architecture-as-risk",children:[]}]},{value:"Software Architecture Documents",id:"software-architecture-documents",children:[{value:"N+1 View Model 2, p.655",id:"n1-view-model-2-p655",children:[]},{value:"Architectural Recap",id:"architectural-recap",children:[]},{value:"Views 2, 657-659",id:"views-2-657-659",children:[]}]},{value:"References",id:"references-2",children:[]},{value:"Software Engineering As a Discipline",id:"software-engineering-as-a-discipline",children:[]},{value:"Personal Software Process",id:"personal-software-process-1",children:[]},{value:"Personal Software Process Goals",id:"personal-software-process-goals",children:[]},{value:"Personal Software Process Areas of Application",id:"personal-software-process-areas-of-application",children:[]},{value:"Personal Software Process Terms",id:"personal-software-process-terms",children:[]},{value:"Foundational Knowledge",id:"foundational-knowledge",children:[]},{value:"Process Definition",id:"process-definition",children:[]}],b={rightToc:c};function u(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Adapted from Stuart Thiel's lecture, 2018 Summer."),Object(r.b)("hr",null),Object(r.b)("h1",{id:"people-and-process"},"People and Process"),Object(r.b)("hr",null),Object(r.b)("h1",{id:"development-phases--testing-and-tdd"},"Development Phases & Testing and TDD"),Object(r.b)("h2",{id:"development-phases"},"Development Phases"),Object(r.b)("h2",{id:"testing-and-tdd"},"Testing and TDD"),Object(r.b)("h3",{id:"who-test"},"Who test?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Outside testers are objective"),Object(r.b)("li",{parentName:"ul"},"Inside testers can be biased, but know their software"),Object(r.b)("li",{parentName:"ul"},"Within a team, worth having developers and colleagues test code")),Object(r.b)("h3",{id:"what-is-a-good-test"},"What is a good test?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Catches most bugs with least effort"),Object(r.b)("li",{parentName:"ul"},"One from each type of test class"),Object(r.b)("li",{parentName:"ul"},"What might a test class be, given this?"),Object(r.b)("li",{parentName:"ul"},"Testing randomly?"),Object(r.b)("li",{parentName:"ul"},"Testing exhaustively?")),Object(r.b)("h3",{id:"why-types-of-tests"},"Why types of tests?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Different types of tests match up with different artifacts"),Object(r.b)("li",{parentName:"ul"},"Different types of tests reveal/confirm different types of issues/features")),Object(r.b)("h3",{id:"what-types-of-tests"},"What types of tests?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Unit Testing (P474)"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Step-by-step with coding"),Object(r.b)("li",{parentName:"ul"},"In OOD, a unit is usually a class"),Object(r.b)("li",{parentName:"ul"},"In functional development, it can be a method/function being tested"),Object(r.b)("li",{parentName:"ul"},"Makes use of stubs and drivers"),Object(r.b)("li",{parentName:"ul"},"Should be automated"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Integration Testing"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Test the quality of the documentation and communication"),Object(r.b)("li",{parentName:"ul"},"Finding side effects"),Object(r.b)("li",{parentName:"ul"},"ncremental integration is best"),Object(r.b)("li",{parentName:"ul"},"Top-down or Bottom-up",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Top-down",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Verifies major control or decision points early"),Object(r.b)("li",{parentName:"ul"},"Depth-first: tests integration of critical paths of modules"),Object(r.b)("li",{parentName:"ul"},"Breadth-first: is good as integration is often tight along a horizontal layer"))),Object(r.b)("li",{parentName:"ul"},"Bottom-up",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"* Skips the need for stubs\n* builds (or clusters) are groupings of low-level modules that have been integrated\n* drivers test these integrated clusters\n* as you move up, throw out the drivers and replace with next level to be integrated\n"))))),Object(r.b)("li",{parentName:"ul"},"Regression Testing",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Find a bug, write a test that catches it. "),Object(r.b)("li",{parentName:"ul"},"That bug is fixed when regression tests passes"),Object(r.b)("li",{parentName:"ul"},"That bug should never come back"))),Object(r.b)("li",{parentName:"ul"},"System-level (Validation) Testing",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Tests user-visible features"),Object(r.b)("li",{parentName:"ul"},"Tests imitate user interactions with system"))),Object(r.b)("li",{parentName:"ul"},"Acceptance Testing (2.P183)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"a test of the requirements"),Object(r.b)("li",{parentName:"ul"},"Leffingwell is focused on Story Acceptance testing, that\u2019s ok"),Object(r.b)("li",{parentName:"ul"},"Does a user using the system see high level functionality they expect?"),Object(r.b)("li",{parentName:"ul"},"Does a user using the system see the feature they expect?"),Object(r.b)("li",{parentName:"ul"},"What about non-functional requirements?"))),Object(r.b)("li",{parentName:"ul"},"Black box Testing"),Object(r.b)("li",{parentName:"ul"},"White box Testing "),Object(r.b)("li",{parentName:"ul"},"Other Types of Tests",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"What types of things from the artifacts aren\u2019t tested by the mentioned tests?")))))),Object(r.b)("h3",{id:"testing-strategy"},"Testing strategy"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Inception and Elaboration may have more focus on unit test, but still have acceptance tests."),Object(r.b)("li",{parentName:"ul"},"As you move on, Integration tests and System tests become more relevant"),Object(r.b)("li",{parentName:"ul"},"As soon as you have bugs, regression tests are relevant")),Object(r.b)("hr",null),Object(r.b)("h1",{id:"requirements"},"Requirements"),Object(r.b)("h2",{id:"what-are-requirements"},"What are requirements?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'"Requirements are capabilities and conditions to which the system\u2013and more broadly, the project\u2013must conform"'),Object(r.b)("li",{parentName:"ul"},'"Inception is Not the Requirements Phase"'),Object(r.b)("li",{parentName:"ul"},"Needs drive features, features drive requirements"),Object(r.b)("li",{parentName:"ul"},"Requirements are best when understood by both developers and customers")),Object(r.b)("h2",{id:"what-are-stories"},"What are stories?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"In Scrum, a Story is a brief statement of intent describing something the system can do for a user"),Object(r.b)("li",{parentName:"ul"},"Stories are negotiable, and should be small enough to make good estimates on"),Object(r.b)("li",{parentName:"ul"},"User Stories are what we are mostly concerned with"),Object(r.b)("li",{parentName:"ul"},"Stories can also include other work items, but those aren\u2019t really related to requirements")),Object(r.b)("h2",{id:"what-are-features"},"What are features?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Bridge gap between User needs and Software Solutions (Requirements)"),Object(r.b)("li",{parentName:"ul"},"Most systems described in 25-50 features"),Object(r.b)("li",{parentName:"ul"},"Features are Program Backlog items in Scrum"),Object(r.b)("li",{parentName:"ul"},"You can Acceptance Test features")),Object(r.b)("h2",{id:"when-we-must-have-requirements"},"When we must have requirements?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Design and development start while only 10-20% of requirements are established"),Object(r.b)("li",{parentName:"ul"},"Requirements, even established ones change"),Object(r.b)("li",{parentName:"ul"},'"on average, 25% of requirements change on software projects"'),Object(r.b)("li",{parentName:"ul"},"Study on waterfall-esque requirements showed 45% were never used, 19 % were rarely used"),Object(r.b)("li",{parentName:"ul"},"Iterative approach: have the requirements you need, when you require them.")),Object(r.b)("hr",null),Object(r.b)("h1",{id:"use-cases"},"Use Cases"),Object(r.b)("h2",{id:"definition-what-are-actors-scenarios-and-use-cases"},"Definition: What are Actors, Scenarios, and Use Cases?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Action: an actor is something with a behaviour. such as a person (identified by a role), computer system, or organization; for example, a cashier."),Object(r.b)("li",{parentName:"ul"},"Scenario (use case instance): a scenario is a specific sequence of actions and interactions between actors and the system; also called use case instance",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Main Success Scenario: is the story of everything going as planned, successfully"),Object(r.b)("li",{parentName:"ul"},"Alternate Scenario: is a story of an important deviation from the Main Success Scenario"))),Object(r.b)("li",{parentName:"ul"},"Use cases: ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"A use case is a collection of related success and failure scenarios that describe an actor using a system to support a goal."),Object(r.b)("li",{parentName:"ul"},"(RUP definition) A use case is a set of use-case instances, where each instance is a sequence of actions a system performs that yields an observable result of value to a particular actor.")))),Object(r.b)("h2",{id:"use-case-model"},"Use Case Model"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A reminder that Use Cases are about text, not UML!"),Object(r.b)("li",{parentName:"ul"},"Use Case Model is a quick way to show written Use Cases, provides a context diagram"),Object(r.b)("li",{parentName:"ul"},"RUP considers the UCM a requirements artifact."),Object(r.b)("li",{parentName:"ul"},"Use Cases aren't OO. They are not about OO analysis, but OOA/OOD can use Use Cases as input")),Object(r.b)("h2",{id:"why-use-cases-p121"},"Why Use Cases (P121)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Lack of user involvement is bad, Use Cases helps user to participate."),Object(r.b)("li",{parentName:"ul"},"Capturing goal is good"),Object(r.b)("li",{parentName:"ul"},"Simple systems work best, it will be easier for customer to contribute to their definition and review.")),Object(r.b)("h2",{id:"definition-are-use-cases-functional-requirements"},"Definition: Are Use Cases Functional Requirements?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Use Cases are primarily functional or behavioral requirements that indicate what the system will do."),Object(r.b)("li",{parentName:"ul"},"Can describe other requirements as well"),Object(r.b)("li",{parentName:"ul"},"In many processes, Use Cases are central mechanism to discover and define requirements"),Object(r.b)("li",{parentName:"ul"},"Use Cases are more than just requirements")),Object(r.b)("h2",{id:"definition-what-are-three-kinds-of-actors"},"Definition: What are Three Kinds of Actors?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Primary Actor: Has user goals fulfilled through using the system. ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Usually a person"),Object(r.b)("li",{parentName:"ul"},"Can be a system or organization"))),Object(r.b)("li",{parentName:"ul"},"Supporting Actor: Provides a service to the system",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"usually a computer system."),Object(r.b)("li",{parentName:"ul"},"Can technically be an organization or a person."))),Object(r.b)("li",{parentName:"ul"},"stage Actor: Has an interest in the behavior of the use case, but is neither Primary nor Supporting, identify (external) interests to make sure their needs are met.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"government tax organization making sure your payment processing is legal")))),Object(r.b)("h2",{id:"notation-what-are-three-common-use-case-formats"},"Notation: What are Three Common Use Case Formats?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"brief : Short summary, usually just the Main Success Scenario"),Object(r.b)("li",{parentName:"ul"},"casual : Maybe a few paragraphs, covering the basics, one paragraph per scenario, including some Alternate Scenarios."),Object(r.b)("li",{parentName:"ul"},"fully dressed : All steps and variations written in detail, includes supporting sections, usually in a tabular format.")),Object(r.b)("hr",null),Object(r.b)("h1",{id:"structural-design-class--rdd-and-grasp-patterns"},"Structural Design Class & RDD and GRASP Patterns"),Object(r.b)("h2",{id:"structural-design"},"Structural Design"),Object(r.b)("h2",{id:"structural-design-class-deagrams-and-ood"},"Structural Design: Class Deagrams and OOD"),Object(r.b)("h3",{id:"object-oriented-design"},"Object Oriented Design"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Object Oriented Design ","[1, p.7]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Define Software Objects"),Object(r.b)("li",{parentName:"ul"},"Identify how they collaborate to meet requirements"))),Object(r.b)("li",{parentName:"ul"},"Domain Model vs. Class Diagram",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"A Domain Model uses the same notation"),Object(r.b)("li",{parentName:"ul"},"A Domain Model is for Conceptual Classes"),Object(r.b)("li",{parentName:"ul"},'Larman likes to use "Design Class Diagram" to distinguish from Domain Models'))),Object(r.b)("li",{parentName:"ul"},"Class Diagrams",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"UML notation is very standard"),Object(r.b)("li",{parentName:"ul"},"Static Object Modeling"),Object(r.b)("li",{parentName:"ul"},"Attributes, methods and associations",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"All these things in detai")))))),Object(r.b)("h2",{id:"rdd-and-grasp-patterns"},"RDD and GRASP Patterns"),Object(r.b)("h3",{id:"responsibility-driven-design-rdd-1"},"Responsibility-Driven Design (RDD) ","[1][2,p276-277]"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"attempts to increase encapsulation by using client-server model"),Object(r.b)("li",{parentName:"ul"},"Focus on intent of request instead of how a request will be served"),Object(r.b)("li",{parentName:"ul"},"Focus on behavior of objects")),Object(r.b)("h3",{id:"rdd-roles"},"RDD Roles"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Controller: makes decisions, directs actions of other objects"),Object(r.b)("li",{parentName:"ul"},"Coordinator: reacts to events, delegates tasks to others"),Object(r.b)("li",{parentName:"ul"},"Information Holder: knows and provides information"),Object(r.b)("li",{parentName:"ul"},"Interfacer: transforms information and requests between objects"),Object(r.b)("li",{parentName:"ul"},"Service Provider: performs work and encapsulates computing services"),Object(r.b)("li",{parentName:"ul"},"Structurer: maintains relationships and metadata about relationships between other objects")),Object(r.b)("h3",{id:"grasp-2-cover-p277-279"},"GRASP ","[2, cover, p.277-279]"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"General Responsibility Assignment Software Patterns(Principles)"),Object(r.b)("li",{parentName:"ul"},"An aid to design that is rational, explainable."),Object(r.b)("li",{parentName:"ul"},"Pattern Names communicate effectively"),Object(r.b)("li",{parentName:"ul"},"Patterns aren't new, they are established")),Object(r.b)("h3",{id:"the-patterns-2-cover"},"The Patterns ","[2, cover]"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Creator: Assign Responsibility of creating class A to class B if:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},'B "contains" most/all groups/groupings of A'),Object(r.b)("li",{parentName:"ul"},"B records A"),Object(r.b)("li",{parentName:"ul"},"B closely uses A"),Object(r.b)("li",{parentName:"ul"},"B has the initial data for A"))),Object(r.b)("li",{parentName:"ul"},'Information Expert: "Assign a Responsibility to a class that has the information needed to fulfill it."'),Object(r.b)("li",{parentName:"ul"},"Controller: Can Represent a System or a Use Case (two avors)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Represents the overall system (facade controller) or"),Object(r.b)("li",{parentName:"ul"},"Represents a Use Case (session/use case controller)"),Object(r.b)("li",{parentName:"ul"},"In your pokemon game?"),Object(r.b)("li",{parentName:"ul"},"Might be your pokemon game?"),Object(r.b)("li",{parentName:"ul"},"Might be what handles a player's turn?"),Object(r.b)("li",{parentName:"ul"},"Both approaches are common"),Object(r.b)("li",{parentName:"ul"},"Both involve handling high-level flow of the application."))),Object(r.b)("li",{parentName:"ul"},"Low Coupling(P444): Assign responsibilities so coupling stays low",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Coupling: How closely one element is connected to another"),Object(r.b)("li",{parentName:"ul"},"has knowledge of"),Object(r.b)("li",{parentName:"ul"},"depends on"),Object(r.b)("li",{parentName:"ul"},"uses/is used by"))),Object(r.b)("li",{parentName:"ul"},"High Cohesion (P461): Assign responsibilities so cohesion stays high",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Cohesion: How well things that are together belong together"),Object(r.b)("li",{parentName:"ul"},'"incidental/coincidental cohesion" bad'),Object(r.b)("li",{parentName:"ul"},'"Functional" good'))),Object(r.b)("li",{parentName:"ul"},"Bad Cohesion",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Incidental/Coincidental: just stuck together because, utilities/leftovers"),Object(r.b)("li",{parentName:"ul"},"Logical: logically related ideas/behaviours, even if purpose and application are different"),Object(r.b)("li",{parentName:"ul"},"Temporal: the things happen at around the same time"))),Object(r.b)("li",{parentName:"ul"},"Moderate Cohesion",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Procedural: control chains through the various behaviours"),Object(r.b)("li",{parentName:"ul"},"Sequential: control chains through the various behaviours as outputs from one are inputs to another"),Object(r.b)("li",{parentName:"ul"},"Communicational2/Informational: the behaviours are applied to the same types of data."))),Object(r.b)("li",{parentName:"ul"},"Cohesion\nFunctional: all behaviours related to one and only one specific task good",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Polymorphism (later)"),Object(r.b)("li",{parentName:"ul"},"Pure Fabrication (later)"),Object(r.b)("li",{parentName:"ul"},"Indirection (later)"),Object(r.b)("li",{parentName:"ul"},"Protected Variation (later)")))),Object(r.b)("hr",null),Object(r.b)("h1",{id:"design-patterns"},"Design Patterns"),Object(r.b)("h2",{id:"design-patterns-1"},"Design Patterns"),Object(r.b)("object",{data:Object(s.a)("assets/COMP 354/designpatternscard.pdf"),type:"application/pdf",width:"100%",height:"850px"},Object(r.b)("embed",{src:Object(s.a)("assets/COMP 354/designpatternscard.pdf"),type:"application/pdf"})),Object(r.b)("h3",{id:"what-are-patterns"},"What are patterns?"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"1: 17.6")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Developers "build up a repertoire of both general principles and idiomatic solutions"')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"When described in terms of a name, a problem and a solution, we call these patterns."),Object(r.b)("p",{parentName:"li"},"  e.g."),Object(r.b)("table",{parentName:"li"},Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Pattern Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Information Expert"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Problem:"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"What is a basic principle by which to assign responsibilities to objects?")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Solution:"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Assign a responsibility to the class that has the information needed to fufill it."))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Pattern names let us quickly share a lot of information")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Patterns are identified, not created. "codify existing tried-and-true-knowledge"'))),Object(r.b)("h3",{id:"grasp-and-gof"},"GRASP and GoF"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"1: 17.6")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Named patterns in software are attributed to Kent Beck, mid-80s"),Object(r.b)("li",{parentName:"ul"},"Gang of Four book came out in 1994, became the accepted design guide, describing 23 core Design Patterns."),Object(r.b)("li",{parentName:"ul"},"GRASP patterns were popularized by Larman in 2000-2010s"),Object(r.b)("li",{parentName:"ul"},"The General approach to Pattern-Based design is broad")),Object(r.b)("h3",{id:"which-patterns-to-consider"},"Which Patterns to Consider?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"It is worth taking a look at Pattern-Based Design in general")),Object(r.b)("h3",{id:"general-pattern-based-design"},"General Pattern-Based Design"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"2: Chapter 16")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Most problems you face have already been solved"),Object(r.b)("li",{parentName:"ul"},"The trick is to find the solution and apply it within your design-space")),Object(r.b)("h4",{id:"what-is-it"},"What is it?"),Object(r.b)("p",null,"Pattern-based design creates a new application by finding a set of proven solutions to a clearly delineated set of problems. Each problem and its solution is described by a design pattern that has been cataloged and vetted by other software engineers who have encountered the problem and implemented the solution while designing other applications. Each design pattern provides you with a proven approach to one part of the problem to be solved."),Object(r.b)("h4",{id:"who-does-it"},"Who does it?"),Object(r.b)("p",null,"A software engineer examines each problem encountered for a new application and then attempts to fi nd a relevant solution by searching one or more patterns repositories."),Object(r.b)("h4",{id:"why-is-it-important"},"Why is it important?"),Object(r.b)("p",null,"Have you ever heard the phrase \u201creinventing the wheel\u201d? It happens all the time in software development, and it\u2019s a waste of time and energy. By using existing design patterns, you can acquire a proven solution for a specific problem. As each pattern is applied, solutions are integrated and the application to be built moves closer to a complete design."),Object(r.b)("h4",{id:"what-are-the-steps"},"What are the steps?"),Object(r.b)("p",null,"The requirements model is examined in order to isolate the hierarchical set of problems to be solved. The problem space is partitioned so that subsets of problems associated with specific software functions and features can be identified. Problems can also be organized by type: architectural, component-level, algorithmic, user interface, and so forth. Once a subset of problems is defined, one or more pattern repositories are searched to determine if an existing design pattern, represented at an appropriate level of abstraction, exists. Patterns that are applicable are adapted to the specific needs of the software to be built. Custom problem solving is applied in situations for which no patterns can be found."),Object(r.b)("h4",{id:"what-is-the-work-product"},"What is the work product?"),Object(r.b)("p",null,"A design model that depicts the architectural structure, user interface, and component-level detail is developed."),Object(r.b)("h4",{id:"how-do-i-ensure-that-ive-done-it-right"},"How do I ensure that I\u2019ve done it right?"),Object(r.b)("p",null,"As each design pattern is translated into some element of the design model, work products are reviewed for clarity, correctness, completeness, and consistency with requirements and with one another."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"It turns out that while this is effectively true, there\u2019s more effort than is implied"),Object(r.b)("li",{parentName:"ul"},"Still, developers have built up many pattern repositories to help with all sorts of software design")),Object(r.b)("h3",{id:"a-general-approach-to-general-patterns"},"A General Approach to General Patterns"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'Problems have context, and qualities, which pressman calls "forces"'),Object(r.b)("li",{parentName:"ul"},"Given a context and the qualities of a problem, the goal is to find the best matching solution."),Object(r.b)("li",{parentName:"ul"},"An effective design pattern in the following way:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"It solves a problem"),Object(r.b)("li",{parentName:"ul"},"It is a proven concept"),Object(r.b)("li",{parentName:"ul"},"The solution isn\u2019t obvious"),Object(r.b)("li",{parentName:"ul"},"It describes a relationship"),Object(r.b)("li",{parentName:"ul"},"The pattern has a significant human component (minimize human intervention)"))),Object(r.b)("li",{parentName:"ul"},'"Design patterns, if used effectively, will invariably make you a better software designer."')),Object(r.b)("h3",{id:"pattern-types-and-standard-groups"},"Pattern Types and Standard Groups"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"There are many kinds of patterns",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Architectural"),Object(r.b)("li",{parentName:"ul"},"Data"),Object(r.b)("li",{parentName:"ul"},"Component (or Design)"),Object(r.b)("li",{parentName:"ul"},"User Interface"),Object(r.b)("li",{parentName:"ul"},"WebApp"))),Object(r.b)("li",{parentName:"ul"},"GoF broke patterns into groups",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Creational"),": focus on creation, composition and representation of objects while hiding how these things are done"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Structural"),": focus on how objects are organized and integrated to create something larger"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Behavioural"),": focus on the assignment of responsibility between objects and the manner in which they communicate")))),Object(r.b)("h3",{id:"approaches-to-pattern-based-software-design"},"Approaches to Pattern-Based Software Design"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Frameworks can facilitate the application of some types of patterns (SOENEA)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},'Note that frameworks are not patterns, as they are "embodied in code"'))),Object(r.b)("li",{parentName:"ul"},"Describing the problem carefully is key in identifying an appropriate pattern"),Object(r.b)("li",{parentName:"ul"},"Pattern languages and pattern repositories can make communicating and finding patterns easier"),Object(r.b)("li",{parentName:"ul"},"Look for ways to apply existing design patterns (vs. trying to create something new)"),Object(r.b)("li",{parentName:"ul"},"Quality considerations are built into good patterns")),Object(r.b)("h3",{id:"pattern-based-design-in-context"},"Pattern-based design in context"),Object(r.b)("p",null,Object(r.b)("img",Object(n.a)({parentName:"p"},{src:"/assets/COMP354/Pattern_in_context.png",alt:"Pattern-based design in context",title:"Pattern-based design in context"}))),Object(r.b)("h3",{id:"thinking-in-patterns"},"Thinking in Patterns"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Mental Design Steps:",Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},"Keep the big picture in mind"),Object(r.b)("li",{parentName:"ol"},"See the patterns in the big picture"),Object(r.b)("li",{parentName:"ol"},"Form these patterns into a context for your later design work"),Object(r.b)("li",{parentName:"ol"},"Work inwards from this context, looking for pattern at gradually lower levels"),Object(r.b)("li",{parentName:"ol"},"Repeat until design is fleshed out"),Object(r.b)("li",{parentName:"ol"},"Refine your design by adapting patterns to your specific software"))),Object(r.b)("li",{parentName:"ul"},"A pattern choice at one level, may well affect pattern choices below or laterally"),Object(r.b)("li",{parentName:"ul"},"Patterns are connected, they are not independant")),Object(r.b)("h3",{id:"design-tasks"},"Design Tasks"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Pressman suggests following design tasks related to the Mental Design Steps."),Object(r.b)("li",{parentName:"ul"},"Determine the domain, and find a related pattern language or pattern repository"),Object(r.b)("li",{parentName:"ul"},"Search for architectural patterns to apply for that domain in the specific problem"),Object(r.b)("li",{parentName:"ul"},"In areas where architectural patterns have been defined, focus on subsystem or component-level (GoF design) patterns."),Object(r.b)("li",{parentName:"ul"},"Keep cycling through till the broad system is covered for both architectural and design/subsystem level patterns"),Object(r.b)("li",{parentName:"ul"},"If GUI patterns are identified, review GUI design patterns against known pattern repositories"),Object(r.b)("li",{parentName:"ul"},"Refine all these patterns carefully to match up with your actual problem context")),Object(r.b)("h3",{id:"common-mistakes"},"Common Mistakes"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"People don\u2019t spend enough time fully understanding the problem"),Object(r.b)("li",{parentName:"ul"},"People choose a wrong pattern, and then stick to it, unable or unwilling to see that it is wrong"),Object(r.b)("li",{parentName:"ul"},"People apply patterns too literally, not willing to refine appropriately for the specific problem, or just being pedantic about their application.")),Object(r.b)("h3",{id:"architectural-patterns"},"Architectural Patterns"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"These decisions impose constraints on all lower level design"),Object(r.b)("li",{parentName:"ul"},"These patterns are the hardest to change once decided on"),Object(r.b)("li",{parentName:"ul"},"These patterns address the structure of the application and key risk areas"),Object(r.b)("li",{parentName:"ul"},"On the bright side, the application of these patterns is often well understood for specific domains (e.g. e-commerce site)")),Object(r.b)("h3",{id:"architectural-pattern-domains"},"Architectural Pattern Domains"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Access Control"),": patterns that address restricting access to information or behaviour"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Concurrency"),": patterns doing many things at once, most commonly because many users may use the system at once (e.g. Enterprise Applications). This can include task schedulers or other mechanisms to avoid problems that arise from concurrency."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Distribution"),": These patterns apply when an application is not isolated to one system (or process). These patterns address the various problems and standard solutions (e.g. web applications)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Persistence"),": Persistence of data can vary from text files to databases, and architectural patterns cover the retrieval and storage or persisted data, as well as the means to properly integrate it into a running application and back again.")),Object(r.b)("h3",{id:"component-level-patterns"},"Component-Level Patterns"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Often focus on a functional element of a system"),Object(r.b)("li",{parentName:"ul"},"Pressman presents it very similarly to the UI patterns"),Object(r.b)("li",{parentName:"ul"},"Generally appears to focus on mid-level interactions with the system")),Object(r.b)("h3",{id:"ui-design-patterns"},"UI Design Patterns"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"These describe established solutions to known UI problems"),Object(r.b)("li",{parentName:"ul"},"Generally deal with layout styles or navigation"),Object(r.b)("li",{parentName:"ul"},"Often they are effectively widgets with known behaviours to address a problem (calendar date-picker, etc.)"),Object(r.b)("li",{parentName:"ul"},"While there is no general guidance in Pressman as to what these really are, the listed patterns are good guidance, and finding pattern repos related to these elements is worthwhile (JQuery UI comes to mind).")),Object(r.b)("h2",{id:"more-grasp-patterns"},"More GRASP Patterns"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.cs.mun.ca/~harold/Courses/Old/CS3716.W12/Diary/Rod/grasp2/grasp2.html"}),"GRASP from Memorial University")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"These patterns are closer to the traditional GoF design patterns than the first five we looked at."),Object(r.b)("li",{parentName:"ul"},"Keep in mind what you see here for when we consider the GoF patterns. This will give you a robust pattern language to discuss software design with")),Object(r.b)("h3",{id:"polymorphism"},"Polymorphism"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Problem"),": Handling alternatives based on type, creating pluggable software components")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Solution"),": When related behaviour varies by type, assign responsibility for the behaviour to the types for which the behaviour varies, generally by using polymorphic operations.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Implementing the same interface does this, but it can be done just as well with dynamic binding.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Overloading methods or the use of the Visitor pattern can extend how this approach can be applied."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public interface Shape {\n    void draw();\n}\n\npublic class Circle implements Shape {\n    void draw(){\n        // do something\n    }\n}\n\npublic class Square implements Shape {\n    void draw(){\n        // do something\n    }\n}\n")),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public void test(Shape shape) {\n    shape.draw();\n}\n")))),Object(r.b)("h4",{id:"polymorphism-in-sequence-diagrams"},"Polymorphism in Sequence Diagrams"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Show the general call in the main frame"),Object(r.b)("li",{parentName:"ul"},"Show alternate frames with the outcome for each type of polymorphic call."),Object(r.b)("li",{parentName:"ul"},"Web Sequence Diagram it?")),Object(r.b)("h4",{id:"bad-polymorphism-alternatives"},"Bad Polymorphism Alternatives"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Switch statements"),Object(r.b)("li",{parentName:"ul"},"passing around type ids")),Object(r.b)("h3",{id:"pure-fabrication"},"Pure Fabrication"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": When you do not want to violate High Cohesion or Low Coupling (or other things), but you do not have a suitable option."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Assign highly cohesive behaviors to an artificial/convenience class."),Object(r.b)("li",{parentName:"ul"},"Eliminate a bad design based on other GRASP patterns with a good design that is generally more reusable.")),Object(r.b)("h4",{id:"pure-fabrications-practices"},"Pure Fabrications Practices"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Not always important to identify Pure Fabrication"),Object(r.b)("li",{parentName:"ul"},"It is important to know when to use it to improve design"),Object(r.b)("li",{parentName:"ul"},"e.g. when explaining why an Information Expert approach was not used, answer that it would have led to high coupling or low cohesion (but not because Pure Fabrication, that\u2019s the solution, not the reason)")),Object(r.b)("h4",{id:"bad-pure-fabrication"},"Bad Pure Fabrication"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Sometimes people apply ",Object(r.b)("strong",{parentName:"li"},"behavioural decomposition")," such that a Pure Fabrication class wraps a single function, or very few functions. This is bad."),Object(r.b)("li",{parentName:"ul"},"Decomposition in that direction may seem natural, but it should be avoided so that ",Object(r.b)("strong",{parentName:"li"},"representational decomposition")," can be more valuable... leaving some behaviours in non Pure Fabrication classes as appropriate."),Object(r.b)("li",{parentName:"ul"},"This type of overuse is often indicated by Low Cohesion.")),Object(r.b)("h3",{id:"indirection"},"Indirection"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": Need to avoid direct coupling between two or more things, keeping coupling low and reuse potential high"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),":  Assign responsibility to an intermediate object that mediates between other components or services, thus removing direct coupling"),Object(r.b)("li",{parentName:"ul"},"These often lead to ",Object(r.b)("strong",{parentName:"li"},"Adapters"),", and generally serve to hide the mess of managing such flexibility.")),Object(r.b)("h3",{id:"protected-variation"},"Protected Variation"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": variance and instability in one element can perpetuate instability to related elements"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Identify points of predicted variation or instability and assign responsibilities to create a stable interface around them (broad use of the term interface)."),Object(r.b)("li",{parentName:"ul"},"Whereas Indirection was to address coupling for the sake of coupling, this approach targets a more specific problem (though the two can be very related)."),Object(r.b)("li",{parentName:"ul"},"This is all about data encapsulation and information hiding, core OO design tricks"),Object(r.b)("li",{parentName:"ul"},"With experience, you can see exactly where to apply this most of the time"),Object(r.b)("li",{parentName:"ul"},"Still very valuable to understand")),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("p",null,"[1]"," Craig Larman. Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative\nDevelopment. Addison Wesley, 3rd edition, 2013."),Object(r.b)("p",null,"[2]"," Roger Pressman. Software Engineering: A Practitioner\u2019s Approach (7th ed.). Pearson, 2010."),Object(r.b)("hr",null),Object(r.b)("h1",{id:"gang-of-four-patterns"},"Gang of Four Patterns"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"[1, p.280,435,436]")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'Named after Gamma, Helm, Johnson and Vlissides, who wrote the mid-90s book "Design Patterns"'),Object(r.b)("li",{parentName:"ul"},"Covered 23 core design patterns, arguably the most popular software design pattern language in use today."),Object(r.b)("li",{parentName:"ul"},'"15 are common use and most useful."')),Object(r.b)("h2",{id:"adapter"},"Adapter"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": incompatible interface, similar components with differing interfaces"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Convert the original interface into another interface through an intermediate adapter object."),Object(r.b)("li",{parentName:"ul"},"Polymorphism from GRASP uses the adapter pattern, the adapter being the common interface."),Object(r.b)("li",{parentName:"ul"},"Often a common interface will be made, and adapters implementing that interface will delegate to the varying objects, hiding the differences."),Object(r.b)("li",{parentName:"ul"},"e.g.: ",Object(r.b)("img",Object(n.a)({parentName:"li"},{src:"/assets/COMP354/Adapter.png",alt:"Pattern-based design in context"})))),Object(r.b)("h2",{id:"factory"},"Factory"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'GoF pattern is actually "Abstract Factory"'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": Need to create object with special considerations like complex creation logic, the need to separate concerns and hide variation in the created\nobjects, the need to generally maintain high cohesion."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Create a Pure Fabrication object called a Factory that handles the creation.")),Object(r.b)("h2",{id:"singleton"},"Singleton"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": Exactly one instance of a class is allowed. Other objects need a global and single point of access"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Define a static method of the class that returns the singleton"),Object(r.b)("li",{parentName:"ul"},"Concurrency control is common around Singletons."),Object(r.b)("li",{parentName:"ul"},"e.g.: ",Object(r.b)("img",Object(n.a)({parentName:"li"},{src:"/assets/COMP354/Singleton.png",alt:"Pattern-based design in context",title:"Singleton"})))),Object(r.b)("h3",{id:"why-not-make-it-all-static"},"Why not make it all static?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"instance-methods allow subclassing, refinement (overloading) of the Singleton class for effective reuse. Static methods aren\u2019t polymorphic, and generally don\u2019t support overwriting in languages where such things are allowed (part of the definition of the class)"),Object(r.b)("li",{parentName:"ul"},"Remote access methods generally support only instance-methods. (e.g. Java\u2019s RMI)"),Object(r.b)("li",{parentName:"ul"},"A class is not always needed as a singleton in all applications.")),Object(r.b)("h2",{id:"strategy"},"Strategy"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": Algorithms or policies can or will change, need to be decided at run-time"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Define each algorithm/policy/strategy in a separate class with a common interface"),Object(r.b)("li",{parentName:"ul"},"Often this leads to the instance of the strategy being created by a Factory that is passed enough info to know what to do."),Object(r.b)("li",{parentName:"ul"},"Polymorphism and Protected Variation at work!"),Object(r.b)("li",{parentName:"ul"},"e.g.: ",Object(r.b)("img",Object(n.a)({parentName:"li"},{src:"/assets/COMP354/Strategy.png",alt:"Pattern-based design in context",title:"Strategy"})))),Object(r.b)("h2",{id:"composite"},"Composite"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": A number of similar objects need to be treated atomically"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Define an interface for composite objects that is shared with the atomic objects it composes"),Object(r.b)("li",{parentName:"ul"},"works well with the strategy pattern, as certain strategies may just be several simpler strategies applied together (e.g. discounts)"),Object(r.b)("li",{parentName:"ul"},"when using composites, it\u2019s generally a good practice to pass around the composites instead of digging out the children (components). Composite Pattern done well supports this."),Object(r.b)("li",{parentName:"ul"},"e.g.: ",Object(r.b)("img",Object(n.a)({parentName:"li"},{src:"/assets/COMP354/Composite.png",alt:"Pattern-based design in context",title:"Composite"})))),Object(r.b)("h2",{id:"facade"},"Facade"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": There are many components in a subsystem, each with some behaviour that is needed, but knowledge of this subsystem or access to the other behaviour is not"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": Define a single point of access that provides an interface on the desired behaviours and encapsulates knowledge of the weird subsystem so nothing else has\nto know about it.")),Object(r.b)("h2",{id:"observersubscriber"},"Observer/Subscriber"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Problem"),": Different things want to know about different events and will behave in different ways, but low coupling is desired"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solution"),": define subscribers via an interface that listen, and then have them register to listen to publishers of events that they care about. The publishers will notify the correct subscribers at the correct times."),Object(r.b)("li",{parentName:"ul"},"Frequently use in UIs")),Object(r.b)("h2",{id:"references-1"},"References"),Object(r.b)("p",null,"[1]"," Craig Larman. Applying UML and Patterns: An Introduction to\nObject-Oriented Analysis and Design and Iterative Development.\nAddison Wesley, 3rd edition, 2013"),Object(r.b)("hr",null),Object(r.b)("h1",{id:"architecture"},"Architecture"),Object(r.b)("h2",{id:"architecture-1"},"Architecture"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'"In its simplest form, architecture is the structure or organization of program components(modules), the manner in which these components interact, and the structure of data that are used by the components" ',"[1, p.223]"),Object(r.b)("li",{parentName:"ul"},'"The logical architecture is the large-scale organization of the software classes into packages (or name spaces), subsystems, and layers"',"[2, p.199]"),Object(r.b)("li",{parentName:"ul"},'"Architecture is what you have left when you take away everything you don\u2019t need to explain how the system works" ',"[3, p.393, by way of Krutchen]")),Object(r.b)("h3",{id:"architecture-as-structure-2-197-201"},"Architecture as Structure ","[2, 197-201]"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A key focus in Larman is the organization of code, via package diagrams, into layers to communicate project structure."),Object(r.b)("li",{parentName:"ul"},"This logical organization to communicate structure still applies exactly the same way with other styles besides the layered style.")),Object(r.b)("h3",{id:"architecture-as-risk"},"Architecture as Risk"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Complex or high risk issues should be highlighted in the architecture"),Object(r.b)("li",{parentName:"ul"},"These often end up being structural issues, or at least can end up being thought of that way once they are understood.")),Object(r.b)("h2",{id:"software-architecture-documents"},"Software Architecture Documents"),Object(r.b)("h3",{id:"n1-view-model-2-p655"},"N+1 View Model ","[2, p.655]"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"To learn about a system architecture, we need to look at it in different ways"),Object(r.b)("li",{parentName:"ul"},"Larman describes what has evolved into the N+1 model for doing so, with each of N being one of the ways to look at the system"),Object(r.b)("li",{parentName:"ul"},"The +1 represents key architectural use cases")),Object(r.b)("h3",{id:"architectural-recap"},"Architectural Recap"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We are concerned with the overall important structure of the system"),Object(r.b)("li",{parentName:"ul"},"We are concerned with risk areas of the system.")),Object(r.b)("h3",{id:"views-2-657-659"},"Views ","[2, 657-659]"),Object(r.b)("p",null,"Not all need be included, use the ones that communicate about architecturally relevant things"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Logical",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Conceptual organization of the software in terms of important layers, subsystems, packages, frameworks, classes and interfaces"),Object(r.b)("li",{parentName:"ul"},"Summarizes functionality of major software elements"),Object(r.b)("li",{parentName:"ul"},"Communicate use case realizations as interaction diagrams (usually sequence diagrams) to illustrate key aspects of the system"),Object(r.b)("li",{parentName:"ul"},"Shows an important subset of the system design, generally by way of class diagrams and interaction diagrams."))),Object(r.b)("li",{parentName:"ul"},"Process",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Processes and threads, their responsibilities, collaborations and allocations to elements described in the logical view."),Object(r.b)("li",{parentName:"ul"},"In a webapp, what do we know about Threads/Processes?"))),Object(r.b)("li",{parentName:"ul"},"Deployment",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"A description of the physical deployment of processes and components to the various processing nodes of your system"),Object(r.b)("li",{parentName:"ul"},"A description of the network configuration between nodes"),Object(r.b)("li",{parentName:"ul"},"You can do a lot on the client-side."))),Object(r.b)("li",{parentName:"ul"},"Data",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Overview of data flows, persistent data schemea, any object relational mappings between persistent data and in-memory objects."),Object(r.b)("li",{parentName:"ul"},"Communicate important stored-procedures or triggers"))),Object(r.b)("li",{parentName:"ul"},"Security",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Overview of security schemes, points within the system (and architecture) where security is applied."))),Object(r.b)("li",{parentName:"ul"},"Implementation",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"A view on not just the software code as given in the logical view or design, but including libraries and resources, all organized by their physical location in the system (folder structure)"),Object(r.b)("li",{parentName:"ul"},"Explanation of why should supplement any diagrams of file layout, etc."),Object(r.b)("li",{parentName:"ul"},"For example, a new member of a software team could use this view to guide their understanding of where files go and why they are organized in a given way."))),Object(r.b)("li",{parentName:"ul"},"Development",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Description of the running and testing of the system."),Object(r.b)("li",{parentName:"ul"},"Also covers things like revision control usage and policies"),Object(r.b)("li",{parentName:"ul"},"repo usage, convention and continious integration setup is appropriate here."),Object(r.b)("li",{parentName:"ul"},"Should probably also cover coding conventions, though not listed in Larman."))),Object(r.b)("li",{parentName:"ul"},"Use Cases",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Summary of most architecturally significant use cases"),Object(r.b)("li",{parentName:"ul"},"Probably duplicate the UCM, but only showing those important UCs."),Object(r.b)("li",{parentName:"ul"},"Explanation of why and how are important, the diagram is just for convenience.")))),Object(r.b)("h2",{id:"references-2"},"References"),Object(r.b)("p",null,"[1]"," Roger Pressman. Software Engineering: A Practitioner\u2019s Approach (7th ed.). Pearson, 2010."),Object(r.b)("p",null,"[2]"," Craig Larman. Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development. Addison Wesley, 3rd edition, 2013."),Object(r.b)("p",null,"[3]"," Dean Leffingwell. Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise. Pearson, 2011."),Object(r.b)("hr",null),Object(r.b)("h1",{id:"personal-software-process"},"Personal Software Process"),Object(r.b)("h2",{id:"software-engineering-as-a-discipline"},"Software Engineering As a Discipline"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Needs a Body of Knowledge(BOK) (SWEBOK)"),Object(r.b)("li",{parentName:"ul"},"Needs a way to certify practitioners as competent with that BOK"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8907"}),"https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8907")," (v2, 2009)")),Object(r.b)("h2",{id:"personal-software-process-1"},"Personal Software Process"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Encapsulates the BOK for a process-improvement method"),Object(r.b)("li",{parentName:"ul"},"Approach geared it easy to certify"),Object(r.b)("li",{parentName:"ul"},"Most importantly, it makes better Software Engineers")),Object(r.b)("h2",{id:"personal-software-process-goals"},"Personal Software Process Goals"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Developers able to self-asses"),Object(r.b)("li",{parentName:"ul"},"Developers able to improve their skills"),Object(r.b)("li",{parentName:"ul"},"Employers are able to test employee competence at assessment/improvement")),Object(r.b)("h2",{id:"personal-software-process-areas-of-application"},"Personal Software Process Areas of Application"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Concentration on Software Development"),Object(r.b)("li",{parentName:"ul"},"Can be applied to all parts of the software lifecycle"),Object(r.b)("li",{parentName:"ul"},"Can be applied outside of Software Engineering")),Object(r.b)("h2",{id:"personal-software-process-terms"},"Personal Software Process Terms"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Key Concepts: Any facts, terminology, philosophy"),Object(r.b)("li",{parentName:"ul"},"Skills: The ability to interpret or apply Key Concepts to a task"),Object(r.b)("li",{parentName:"ul"},"Knowledge Area: Key Concepts and related Skills, or the area of understanding gained by their application"),Object(r.b)("li",{parentName:"ul"},"Competency Areas: Closely-related Knowledge Areas",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Foundational Knowledge"),Object(r.b)("li",{parentName:"ul"},"Basic Personal Software Process Concepts"),Object(r.b)("li",{parentName:"ul"},"Size Measuring and Estimating"),Object(r.b)("li",{parentName:"ul"},"Making and Tracking Project Plans"),Object(r.b)("li",{parentName:"ul"},"Planning and Tracking Software Quality"),Object(r.b)("li",{parentName:"ul"},"Software Design"),Object(r.b)("li",{parentName:"ul"},"Process Extensions and Customization")))),Object(r.b)("h2",{id:"foundational-knowledge"},"Foundational Knowledge"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Process Definition"),Object(r.b)("li",{parentName:"ul"},"Process Elements"),Object(r.b)("li",{parentName:"ul"},"Statistical Elements")),Object(r.b)("h2",{id:"process-definition"},"Process Definition"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Process: be able to plan and execute specific steps to do a specific task"),Object(r.b)("li",{parentName:"ul"},"Defined Process: be able to identify, document a process that is done repeatedly and is required for a job. Generally must be repeatable, even by others."),Object(r.b)("li",{parentName:"ul"},"Benefits: understand that this leads to better planning/tracking/managing:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Can evaluate whether work is, done, how much has been done and how correctly it has been done objectively"),Object(r.b)("li",{parentName:"ul"},"Smooths coordination within a team"),Object(r.b)("li",{parentName:"ul"},"Allows better support between team members"))),Object(r.b)("li",{parentName:"ul"},"Process documentation: can produce succinct written representations of process. Not a tutorial. Enough for an expert."),Object(r.b)("li",{parentName:"ul"},"Processes and plans: can produce plans, which includes resource/role management, understanding the specific applications of a process for a given project, and other high-level concenrs:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"schedules"),Object(r.b)("li",{parentName:"ul"},"budget"),Object(r.b)("li",{parentName:"ul"},"goals"),Object(r.b)("li",{parentName:"ul"},"commitments"),Object(r.b)("li",{parentName:"ul"},"identified risks"))),Object(r.b)("li",{parentName:"ul"},"Personal process: can make a set of steps for one\u2019s own workflow to guide work self-evaluation and self-improvement",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"based on own experience"),Object(r.b)("li",{parentName:"ul"},"modified from some other process"))),Object(r.b)("li",{parentName:"ul"},"Enactable and operational processes:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Enactable: can define how to do a process in terms of what\u2019s needed and what will result"),Object(r.b)("li",{parentName:"ul"},"Operational: can define what to do, like a tutorial on a process to guide a knowledgeable professional through that task. Enough detail to plan and track around (Personal Software Process is an operational process)"))),Object(r.b)("li",{parentName:"ul"},"Process phases: can break down a process into phases (effectively sub-processes) as needed. At a minimum, phases are planning, development and postmortem",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Planning: Produce a plan to do the work."),Object(r.b)("li",{parentName:"ul"},"Development: Perform the work.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Define the requirements"),Object(r.b)("li",{parentName:"ul"},"Design the program"),Object(r.b)("li",{parentName:"ul"},"Review the design and fix all defects"),Object(r.b)("li",{parentName:"ul"},"Code the program"),Object(r.b)("li",{parentName:"ul"},"Review the code and fix all defects"),Object(r.b)("li",{parentName:"ul"},"Build or compile and fix all defects"),Object(r.b)("li",{parentName:"ul"},"Test the program and fix all defects"))),Object(r.b)("li",{parentName:"ul"},"Postmortem: Compare actual performance against the plan, record process data, produce a summary report, and document all ideas for process improvement."))),Object(r.b)("li",{parentName:"ul"},"Incremental development: Each thing you do can be a Personal Software Process project, be it adding a simple feature or building a complex subsystem... even the whole project."),Object(r.b)("li",{parentName:"ul"},"Process tailoring: be able to re-use existing processes appropriately for a particular purpose"),Object(r.b)("li",{parentName:"ul"},'Process building and refining: learn to build your own process toolkit and refine these and other Personal Software Process "Scripts" that you use.')))}u.isMDXComponent=!0},260:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=b(a),d=n,m=u["".concat(s,".").concat(d)]||u[d]||p[d]||r;return a?i.a.createElement(m,l(l({ref:t},c),{},{components:a})):i.a.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var c=2;c<r;c++)s[c]=a[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},261:function(e,t,a){"use strict";var n=a(0),i=a(52);t.a=function(){return Object(n.useContext)(i.a)}},262:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));a(76);var n=a(261),i=a(263);function r(e,t){var a=void 0===t?{}:t,r=a.forcePrependBaseUrl,s=void 0!==r&&r,l=a.absolute,o=void 0!==l&&l,c=Object(n.a)().siteConfig,b=(c=void 0===c?{}:c).baseUrl,u=void 0===b?"/":b,p=c.url;if(!e)return e;if(s)return u+e;if(!Object(i.a)(e))return e;var d=u+e.replace(/^\//,"");return o?p+d:d}},263:function(e,t,a){"use strict";function n(e){return!1===/^(https?:|\/\/|mailto:|tel:)/.test(e)}a.d(t,"a",(function(){return n}))}}]);